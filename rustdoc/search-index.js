var searchIndex = {};
searchIndex["adapton"] = {"doc":"","items":[[0,"macros","adapton","",null,null],[3,"ProgPt","adapton::macros","",null,null],[12,"symbol","","",0,null],[5,"my_hash","","",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"my_hash_n","","",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"u64"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"progpt"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"progpt"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"progpt"}}],[11,"hash","","",0,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"engine","adapton","Adapton's core calculus, implemented as a runtime library.  We implement two versions of this interface, which we refer to as _engines_: The **naive engine** and the **DCG engine**, implemented based on the algorithms from the Adapton papers.",null,null],[3,"Name","adapton::engine","*Names*: First-class data that identifies a mutable cell (see `cell`) or a thunk (see `thunk`).  When a name identifies different content over time, it describes *where* incremental changing is occurring, relative to other (unaffected) parts of data structures or computations.",null,null],[3,"Flags","","Flags control runtime behavior of the DCG.",null,null],[12,"use_purity_optimization","","",1,null],[12,"ignore_nominal_use_structural","","Ignore the `Nominal` `ArtIdChoice`, and use `Structural` behavior instead",1,null],[12,"check_dcg_is_wf","","After each Adapton operation, check that the DCG is well-formed",1,null],[12,"write_dcg","","Within each well-formedness check, write the DCG to the local filesystem",1,null],[12,"gmlog_dcg","","Deprecated: At certain points in the Engine's code, write state changes as graph-movie output TODO: To be replaced with DCG reflection, and reflection-to-filesystem logic.",1,null],[3,"DCG","","*(DCG) Demanded Computation Graph*: The cache of past computation.",null,null],[12,"flags","","",2,null],[3,"Cnt","","*Engine Counts*: Metrics that reflect the time and space costs of the engine.",null,null],[12,"create","","Number of DCG nodes created",3,null],[12,"eval","","Number of DCG nodes evaluated",3,null],[12,"dirty","","Number of DCG nodes marked as dirty",3,null],[12,"clean","","Number of DCG nodes reverted from dirty to clean",3,null],[12,"stack","","Maximum height of the DCG node stack.  This stack is pushed when DCG nodes are evaluated, and popped when they complete.",3,null],[3,"Art","","*Articulations:* for incrementally-changing data/computation.",null,null],[4,"Engine","","The engine API works in two modes: `Naive` and `DCG`. A `Naive` engine is stateless, whereas the `DCG` is stateful.",null,null],[13,"DCG","","",4,null],[13,"Naive","","",4,null],[4,"ArtIdChoice","","An `ArtIdChoice` choses between `Eager`, `Structural` and `Nominal` identities for articulation points introduced by `thunk`.",null,null],[13,"Eager","","Eagerly produces an `Art` that merely consists of an `Rc`; no additional indirection is needed/used.",5,null],[13,"Structural","","Identifies an `Art` based on hashing content (e.g., `prog_pt` for code and argument(s)).",5,null],[13,"Nominal","","Identifies an `Art` based on a programmer-chosen name.",5,null],[5,"name_unit","","Create a name from unit, that is, create a \"leaf\" name.",null,{"inputs":[],"output":{"name":"name"}}],[5,"name_pair","","Create one name from two (binary name composition)",null,{"inputs":[{"name":"name"},{"name":"name"}],"output":{"name":"name"}}],[5,"name_of_usize","","Create a name from a `usize`",null,{"inputs":[{"name":"usize"}],"output":{"name":"name"}}],[5,"name_of_isize","","Create a name from a `isize`",null,{"inputs":[{"name":"isize"}],"output":{"name":"name"}}],[5,"name_of_string","","Create a name from a `string`",null,{"inputs":[{"name":"string"}],"output":{"name":"name"}}],[5,"name_of_str","","Create a name from a `str`",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"name_fork","","Create two names from one",null,null],[5,"name_fork3","","Create three names from one",null,null],[5,"name_fork4","","Create four names from one",null,null],[5,"ns","","Creates or re-enters a given namespace; performs the given computation there.",null,{"inputs":[{"name":"name"},{"name":"f"}],"output":{"name":"t"}}],[5,"structural","","Enters a special \"namespace\" where all name uses are ignored; instead, Adapton uses structural identity.",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"put","","Creates an unnamed, immutable reference cell (an eager `Art<_>`) whose content may not change over time.",null,{"inputs":[{"name":"t"}],"output":{"name":"art"}}],[5,"cell","","Creates a named reference cell (an eager `Art<_>`) whose content can change over time.",null,{"inputs":[{"name":"name"},{"name":"t"}],"output":{"name":"art"}}],[5,"set","","Mutates a mutable articulation.",null,{"inputs":[{"name":"art"},{"name":"t"}],"output":null}],[5,"thunk","","Allocates a thunk, an `Art<T>` that consists of a suspended computation that produces a value of type `T`.",null,{"inputs":[{"name":"artidchoice"},{"name":"progpt"},{"name":"rc"},{"name":"arg"},{"name":"spurious"}],"output":{"name":"art"}}],[5,"force","","Demands and observes the value of an `&Art<T>`, returning a (cloned) value of type `T`.",null,{"inputs":[{"name":"art"}],"output":{"name":"t"}}],[0,"reflect","","Reflects the DCG engine, including both the effects of the programs running in it, and the internal effects of the engine cleaning and dirtying the DCG.  For the latter effects, see the `trace` module.",null,null],[3,"Loc","adapton::engine::reflect","Reflected version of `engine::Loc` A `Loc` is a particular template for a `Name`: It is a path (a possibly-empty list of `Name`s), followed by a distinguished `Name`.  A `Loc` can be thought of roughly like a file path in UNIX (but Adapton has nothing to do with files, or with UNIX, directly).",null,null],[12,"path","","The path of the `Loc` is a list of `Name`s.",6,null],[12,"name","","The distinguished `Name` of the `Loc` (must be unique in the path).",6,null],[3,"Succ","","Reflected version of `engine::Succ`.  Unlike the real engine's `Succ` type, this version stores a reflected value (of type `Val`).",null,null],[12,"dirty","","Dirty invariant: If this edge is dirty, then all predecessors of the edge are dirty too.",7,null],[12,"loc","","The target of the outgoing `Effect`",7,null],[12,"effect","","The effect: either producing or consuming articulated content",7,null],[12,"value","","The value either produced or consumed by this `Effect`",7,null],[3,"Pred","","Reflected version of `engine::Pred`",null,null],[12,"loc","","The predecessor of the node in question",8,null],[12,"effect","","The effect that the predecessor has done to the node in question",8,null],[3,"CompNode","","Reflected version of `engine::CompNode`.  Stores a reflected value of type `Option<Val>`, which is `None` when the node has not yet been executed, and `Some(_)` otherwise.",null,null],[12,"preds","","",9,null],[12,"succs","","",9,null],[12,"prog_pt","","",9,null],[12,"value","","",9,null],[3,"RefNode","","Reflected version of `engine::MutNode`.  Stores a reflected value of type `Val`.",null,null],[12,"preds","","",10,null],[12,"value","","",10,null],[3,"PureNode","","Reflected version of `engine::PureNode`.  Stores a reflected value of type `Val`.",null,null],[12,"value","","",11,null],[3,"Frame","","Reflected version of `engine::Frame`.",null,null],[12,"loc","","",12,null],[12,"succs","","",12,null],[3,"DCG","","Reflected version of `engine::DCG`.",null,null],[12,"table","","The current memo table, mapping `Loc`s to `Node`s.",13,null],[12,"stack","","A stack of `Frame`s, which store the currently-executing nodes, and their outgoing edges thus far.",13,null],[12,"path","","A list of `Name`s, which is extended for nested regions of code by the `ns` (namespace) combinator.  This path variable determines the path for each allocated `Loc`.",13,null],[4,"Val","","Reflected value; Gives a syntax for inductive data type constructors (`Constr`), named articulations (`Art`) and primitive data (`Data`).  All values in the engine (including the values of nodes, and the values stored on edges) are represented with this reflected `Val` type.  Primarily, this distinction between actual Rust values and this type is what makes the DCG engine \"reflected\" by the definitions in this module, and not identical to them.",null,null],[13,"Constr","","Constructor, with a sequence of value parameters.",14,null],[13,"Tuple","","A tuple of values (like a constructor, but without a constructor name). Can be seen as a special case of `Constr`.",14,null],[13,"Vec","","A list of values (like a tuple, but parsed and printed differently). Can be seen as a special case of `Constr`.",14,null],[13,"Struct","","Constructor with a sequence of fields (name-value pairs) as parameters.",14,null],[13,"Art","","Named articulation, and its content (an `Art` is either a named value, or a named computation).",14,null],[13,"Name","","First-class `Name` value.",14,null],[13,"Const","","Primitive, immutable data.",14,null],[13,"ValTODO","","Temporary; for marking places in code where we should produce a value, but don't yet have a good way to do so.",14,null],[4,"Const","","Primitive constants",null,null],[13,"Num","","Integers",15,null],[13,"Nat","","Natural numbers",15,null],[13,"String","","Strings",15,null],[4,"ArtContent","","The content of an articulation: Either a cell holding a value, or a thunk that has optionally produced a value.",null,null],[13,"Val","","The `Art` consists of a ref cell holding a value",16,null],[13,"Comp","","The `Art` consists of a thunk that, when forced, computes a value",16,null],[13,"Unknown","","`Unknown` content means that it has not yet dereferenced by any reflective process.  A reflective process dereferences an `Art` by using a reflected `DCG` to map this `Art`'s `Loc` to a `Node`.  This node gives one of the two known cases (`Val` or `Comp`), above, depending on whether it is a `RefNode` or a `CompNode`.",16,null],[4,"Effect","","Reflected version of `engine::Effect`",null,null],[13,"Force","","The effect consists of a thunk observing the value of another thunk or reference cell.  That is, the effect consists of **consuming** a value, by demanding its production.",17,null],[13,"Alloc","","The effect consists of a thunk allocating a value or thunk at a particular name.  That is, the effect consists of **producing** a value or computation.  If this content differs, then the allocation is a **reallocation**, and the engine dirties the old observers and allocators of the preceding content.",17,null],[4,"Node","","Reflected version of `engine::Node`.  Unlike the real engine, these nodes are not parameterized by a value type.  Instead, their values are all reflected into type `Val`.",null,null],[13,"Comp","","",18,null],[13,"Ref","","",18,null],[13,"Pure","","",18,null],[5,"succs_of_node","","Get the `Succ`s of a `Node`, if they are defined.",null,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[5,"preds_of_node","","Get the `Pred`s of a `Node`, if they are defined.",null,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[5,"string_of_name","","See doc for `write_name`. Returns this output as a string.",null,{"inputs":[{"name":"name"}],"output":{"name":"string"}}],[5,"string_of_path","","See doc for `write_path`. Returns this output as a string.",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"string_of_loc","","See doc for `write_loc`. Returns this output as a string.",null,{"inputs":[{"name":"loc"}],"output":{"name":"string"}}],[5,"write_name","","Write a concise human-readable version of the name (not the verbose, machine-parsable `Debug` version).",null,{"inputs":[{"name":"w"},{"name":"name"}],"output":null}],[5,"write_path","","Write a concise human-readable version of the path (not the verbose, machine-parsable `Debug` version).",null,{"inputs":[{"name":"w"},{"name":"path"}],"output":null}],[5,"write_loc","","Write a concise human-readable version of the location (not the verbose, machine-parsable `Debug` version).  ",null,{"inputs":[{"name":"w"},{"name":"loc"}],"output":null}],[5,"reflect_val","","_Rust data and articulation reflection_: Transform any(*) Rust data that derives `Debug` into a reflected `Val`.  ",null,{"inputs":[{"name":"v"}],"output":{"name":"val"}}],[5,"dcg_reflect_now","","Reflect the DCG's internal structure now.  Does not reflect any engine effects over this DCG (e.g., no cleaning or dirtying), just the _program effects_ recorded by the DCG's structure. Returns None if the engine is `Naive` and thus has no reflected state whatsoever.",null,{"inputs":[],"output":{"name":"option"}}],[5,"dcg_reflect_begin","","Begin recording (reflections of) DCG effects.  See `dcg_reflect_end()`.",null,{"inputs":[],"output":null}],[5,"dcg_reflect_end","","Stop recording (reflections of) DCG effects, and return them as a forrest (of DCG traces).  See `dcg_reflect_begin()`.",null,{"inputs":[],"output":{"name":"vec"}}],[0,"trace","","Gives effects and traces for cleaning and dirtying, the engine's internal DCG traversal/processing.  By contrast, the enclosing module (`reflect`) only gives reflected versions of the DCG itself, not changes that the engine makes to it.",null,null],[3,"Edge","adapton::engine::reflect::trace","An edge in the DCG, representing an effect of the incremental program.",null,null],[12,"loc","","The source of the directed edge; it is actively _doing_ the effect of `succ.effect` to `succ.loc`.  `None` means the doer is the **editor**, who is not identified by any location. (The editor is not a node in the DCG, but rather, an actor operating outside of it).",19,null],[12,"succ","","The effect and target of the directed edge.",19,null],[3,"Trace","","`DCGTrace`: A Rose-tree of DCG edge-effects.  This tree structure allows the effects to have a a \"time interval\" that nests around and within the time intervals of other effects.",null,null],[12,"effect","","The DCG effect (e.g., Alloc(MatchDiff), Dirty, Clean, etc.)",20,null],[12,"edge","","The DCG edge on which this DCG effect takes place",20,null],[12,"extent","","The DCG effects that occur subordinately as a result of this effect. (They begin after this effect begins, and the end before this effect ends).",20,null],[4,"AllocCase","","Distinguish fresh allocations from those that reuse an existing location.",null,null],[13,"LocFresh","","The allocation was **created** fresh; it was **not** reused.",21,null],[13,"LocExists","","The allocation matched the location of a prior allocation. its content may or may not also match.  The `bool` indicates the two cases: `true` means same content, `false` means changed content.",21,null],[4,"AllocKind","","Distinguish ref cell allocations from thunk allocations",null,null],[13,"RefCell","","",22,null],[13,"Thunk","","",22,null],[4,"ForceCase","","When the program `force`s a computation, either the cache is either empty (`CacheMiss`) or non-empty (`CacheHit`).  The cached value may not be consistent without a cleaning.  When the program `force`s a reference cell, it simply gets the current value.",null,null],[13,"CompCacheMiss","","The DCG has no cached value for this computation; no prior computation will be reused.",23,null],[13,"CompCacheHit","","The DCG has a cached value for this computation; it may not be consistent without a cleaning first.",23,null],[13,"RefGet","","The forced node is a ref cell with a (mutable) value, and hence, no computation was necessary.  The `force` simply gets the current value.",23,null],[4,"Effect","","The effects of the DCG (including cleaning and dirtying) on one of its edges.",null,null],[13,"Alloc","","Wrapper for Effect::Alloc; transition to DCG after the alloc.",24,null],[13,"Force","","Wrapper for Effect::Force; transition to DCG after the force.",24,null],[13,"Dirty","","Transition to this edge as **dirty** (potentially inconsistent). This transition may consist of marking other edges dirty.  The DCG's invariant about dirty edges is simple: If an edge is dirty, then all edges that force (demand/observe) the source of that edge must also be dirty.  This transitive closure property ensures that we do not accidentally reuse stale cached values by mistake (a dirty edge will always witness a potentially stale cached value).",24,null],[13,"CleanRec","","Clean this edge, marking it **not dirty**, or equivalently, **definitely consistent**. Cleaning an edge consists of processing the edge's dirty transitive dependencies, if any. Recursively, this processing may consist of marking other edges clean (`CleanEdge`), and/or, removing edges (`Remove`) and replacing them via reevaluation under the current DCG state (`CleanEval`).  ",24,null],[13,"CleanEdge","","Transition to this edge as **clean** (definitely consistent), after doing a recursive cleaning of its dependencies and finding that they are clean.  This effect is mutually-exclusive with `CleanEval`, which occurs when `CleanEdge` **cannot** occur on an edge that is being recursively cleaned (via `CleanRec`).",24,null],[13,"CleanEval","","Re-evaluate the previously-forced thunk that is the target of this edge, to clean it.  This effect is mutually-exclusive with `CleanEdge`.  It occurs when `CleanEdge` cannot occur.",24,null],[13,"Remove","","Transition to the DCG without this edge.  Perhaps it will be replaced via re-execution, sometime later.",24,null],[6,"Path","adapton::engine::reflect","A `Path` here is just a `Vec` of `Name`s",null,null],[8,"Reflect","","This trait consists of the ability for a reference to `Self` to produce a `T`.  Conceptually, that value of type T is the \"reflection\" of `Self`.  A large set of types in `engine` implement this trait for a particular type in this module, which represents its reflection.  The documentation of this module makes this correspondance clear.",null,null],[10,"reflect","","",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[0,"manage","adapton::engine","Operations that monitor and alter the active engine.  Incremental applications should not use these operations directly.",null,null],[5,"init_dcg","adapton::engine::manage","Initializes global state with a fresh DCG-based engine; returns the old engine. The DCG is the central implementation structure behind Adapton. At a high level, it consists of a data dependence graph (the \"demanded computation graph\"), and an associated memoization table.",null,{"inputs":[],"output":{"name":"engine"}}],[5,"init_naive","","Initializes global state with a (\"fresh\") Naive engine; returns the old engine. The naive engine is stateless, and performs no memoization and builds no dependence graphs. (Since the naive engine is stateless, every instance of the naive engine is equivalent to a \"fresh\" one).",null,{"inputs":[],"output":{"name":"engine"}}],[5,"use_engine","","Initializes global state with a fresh DCG-based engine; returns the old engine",null,{"inputs":[{"name":"engine"}],"output":{"name":"engine"}}],[5,"init_engine","","alias for `use_engine`",null,{"inputs":[{"name":"engine"}],"output":{"name":"engine"}}],[5,"cnt","","Counts various engine cost metrics, returning a product of sums (`Cnt`)",null,null],[5,"engine_is_naive","","True iff the current engine is `Naive`",null,{"inputs":[],"output":{"name":"bool"}}],[5,"engine_is_dcg","","True iff the current engine is a `DCG`",null,{"inputs":[],"output":{"name":"bool"}}],[11,"eq","adapton::engine","",26,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"name"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",26,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"engine"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"reflect","","",2,{"inputs":[{"name":"self"}],"output":{"name":"dcg"}}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"hash","","",5,null],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"artidchoice"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"artidchoice"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"artidchoice"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",3,null],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"cnt"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"cnt"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"cnt"}}],[11,"add","","",3,null],[11,"zero","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"art"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"art"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"art"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"collections","adapton","",null,null],[4,"Dir2","adapton::collections","",null,null],[13,"Left","","",28,null],[13,"Right","","",28,null],[4,"List","","",null,null],[13,"Nil","","",29,null],[13,"Cons","","",29,null],[13,"Tree","","",29,null],[13,"Name","","",29,null],[13,"Art","","",29,null],[4,"Tree","","",null,null],[13,"Nil","","",30,null],[13,"Leaf","","",30,null],[13,"Bin","","",30,null],[13,"Name","","",30,null],[13,"Art","","",30,null],[4,"NameElse","","",null,null],[13,"Name","","",31,null],[13,"Else","","",31,null],[5,"list_gen","","",null,{"inputs":[{"name":"usize"},{"name":"g"}],"output":{"name":"l"}}],[5,"list_nil","","",null,{"inputs":[],"output":{"name":"l"}}],[5,"list_cons","","",null,{"inputs":[{"name":"x"},{"name":"l"}],"output":{"name":"l"}}],[5,"list_name","","",null,{"inputs":[{"name":"name"},{"name":"l"}],"output":{"name":"l"}}],[5,"list_art","","",null,{"inputs":[{"name":"art"}],"output":{"name":"l"}}],[5,"list_name_art_op","","",null,{"inputs":[{"name":"option"},{"name":"l"}],"output":{"name":"l"}}],[5,"list_name_op","","",null,{"inputs":[{"name":"option"},{"name":"l"}],"output":{"name":"l"}}],[5,"list_map_lazy","","Lazily maps the list, guided by names in input list. Creates lazy named thunks in output for each name in input.",null,{"inputs":[{"name":"le"},{"name":"rc"}],"output":{"name":"li"}}],[5,"list_filter_lazy","","Lazily filters the list, guided by names in input list. Creates lazy named thunks in output for each name in input.",null,{"inputs":[{"name":"le"},{"name":"rc"}],"output":{"name":"li"}}],[5,"list_filter_eager","","Eagerly filters the list, guided by names in input list. Memoizes recursion for each name in input.",null,{"inputs":[{"name":"le"},{"name":"rc"}],"output":{"name":"li"}}],[5,"list_map_eager","","Eagerly maps the list. Uses (eager) memoization for each name in `l`.",null,{"inputs":[{"name":"le"},{"name":"rc"}],"output":{"name":"li"}}],[5,"list_map_eager2","","Eagerly maps the list.  Uses (eager) memoization for each name in `l`.  Unlike list_map_eager, it allocates a reference cell for each name, separate from the memoized thunk for the recursive call.",null,{"inputs":[{"name":"le"},{"name":"rc"}],"output":{"name":"li"}}],[5,"list_reverse","","Eagerly maps the list. Uses (eager) memoization for each name in `l`.",null,{"inputs":[{"name":"le"},{"name":"li"}],"output":{"name":"li"}}],[5,"list_fold","","Ignores names; performs no memoization; use tree_fold_* for lists that could be long.",null,{"inputs":[{"name":"l"},{"name":"res"},{"name":"rc"}],"output":{"name":"res"}}],[5,"list_is_empty","","",null,{"inputs":[{"name":"l"}],"output":{"name":"bool"}}],[5,"list_pop","","",null,null],[5,"list_push","","",null,{"inputs":[{"name":"l"},{"name":"x"}],"output":{"name":"l"}}],[5,"list_append","","",null,{"inputs":[{"name":"l"},{"name":"l"}],"output":{"name":"l"}}],[5,"map_empty","","",null,{"inputs":[],"output":{"name":"m"}}],[5,"map_update","","",null,{"inputs":[{"name":"m"},{"name":"dom"},{"name":"cod"}],"output":{"name":"m"}}],[5,"map_find","","",null,{"inputs":[{"name":"m"},{"name":"dom"}],"output":{"name":"option"}}],[5,"map_fold","","",null,{"inputs":[{"name":"m"},{"name":"res"},{"name":"rc"}],"output":{"name":"res"}}],[5,"tree_fold_seq","","",null,{"inputs":[{"name":"t"},{"name":"dir2"},{"name":"res"},{"name":"rc"},{"name":"rc"},{"name":"rc"}],"output":{"name":"res"}}],[5,"tree_fold_up","","Fold over the structure of the tree, with results flowing up, from `nil` and `leaf` cases to the binary cases of `bin` and `name`. This folding pattern is suitable for aggregating the leaf elements via an associative operation, such as a monoid (e.g., counting, addition, multiplication, maximum, minimum, etc.). See `monoid_of_tree` for a wrapper function that offers this usage. This folding pattern is also suitable for producing copies of the tree's structure.",null,{"inputs":[{"name":"t"},{"name":"rc"},{"name":"rc"},{"name":"rc"},{"name":"rc"}],"output":{"name":"res"}}],[5,"tree_fold_up_nm_dn","","Like `tree_fold_up`, except that names from `name` nodes are passed down, to the next `nil` and `leaf` cases. The name from a `name` constructor associates to its right subtree, which is consistent with a left-to-right, in-order traversal of the tree. The recursive argument `nm` provides the name for the left subtree, if any.",null,{"inputs":[{"name":"t"},{"name":"option"},{"name":"rc"},{"name":"rc"},{"name":"rc"},{"name":"rc"}],"output":{"name":"res"}}],[5,"tree_of_list","","",null,{"inputs":[{"name":"dir2"},{"name":"l"}],"output":{"name":"t"}}],[5,"tree_of_list_rec","","",null,null],[5,"list_of_tree","","List the leaf elements and names of a tree, in the given order, via a sequential, in-order traversal. Direction `Dir2::Left` lists elements from left to right. (Leftmost elements are in the head of the list). Direction `Dir2::Right` lists elements from right to left. (Rightmost elements are in the head of the list). Preserves the order of elements, up to `dir`, and the names in the tree.",null,{"inputs":[{"name":"t"},{"name":"dir2"}],"output":{"name":"l"}}],[5,"filter_list_of_tree","","Filter the leaf elements of a tree using a user-provided predicate, `pred`. Returns a list of the elements for which the predicate returns `true`. Retains exactly one name between any two elements that, in the original sequence, were separated by a name. Does not insert names that were not present in the original sequence.",null,{"inputs":[{"name":"t"},{"name":"box"}],"output":{"name":"l"}}],[5,"filter_tree_of_tree","","Filter the leaf elements of a tree using a user-provided predicate, `pred`. Returns a tree of the elements for which the predicate returns `true`. Retains all names from the original tree, even if they merely name empty sub-trees.",null,{"inputs":[{"name":"te"},{"name":"box"}],"output":{"name":"ti"}}],[5,"monoid_of_tree","","Aggregates the leaf elements of a tree using a user-defined monoid.  The monoid consists of an identity element `id_elm` and binary operation over leaf values `bin_op`. Derived from `tree_fold_up`.",null,{"inputs":[{"name":"te"},{"name":"x"},{"name":"rc"}],"output":{"name":"x"}}],[5,"eager_tree_of_tree","","Produces a tree with the same structure as its input, but without any articulations.  Useful for `println`-style debugging, and for equality comparisons across distinct engine implementations (e.g., to verify the DCG-based engine).",null,{"inputs":[{"name":"te"}],"output":{"name":"ti"}}],[5,"prune_tree_of_tree","","Produces a tree with the same structure as its input, but without any empty subtrees, and with articulations placed around the subtrees of named binary nodes.",null,{"inputs":[{"name":"te"}],"output":{"name":"ti"}}],[5,"list_demand","","Calls `vec_of_list` with the given `demand`",null,{"inputs":[{"name":"l"},{"name":"usize"}],"output":{"name":"vec"}}],[5,"vec_of_list","","Attempts to force `limit` number of `Cons` cells of the list, gathering these elements and any interposed `Name`s.",null,{"inputs":[{"name":"l"},{"name":"option"}],"output":{"name":"vec"}}],[5,"list_of_vec","","Constructs a linked list that consists of elements and names, as given by the input vector (in that order). Not incremental; used only for setting up inputs for tests.",null,{"inputs":[{"name":"vec"}],"output":{"name":"l"}}],[5,"list_merge","","Produce a lazy list that consists of merging two input lists. The output is lazy to the extent that the input lists contain `name`s. When the input lists are each sorted according to `Ord`; the output is sorted.",null,{"inputs":[{"name":"option"},{"name":"l"},{"name":"option"},{"name":"l"}],"output":{"name":"l"}}],[5,"mergesort_list_of_tree","","Demand-driven sort over a tree's leaves, whose elements are `Ord`. To the extent that the tree contains `name`s, the output is lazy, and thus sorts on-demand. Demanding the first element is `O(n)` for a tree with `n` leaves. Demanding the next element requires more comparisons, but fewer than the first element. Demanding the last element requires only `O(1)` comparisons. In total, the number of comparisons to demand the entire output is, as usual, `O(n ° log(n))`.",null,{"inputs":[{"name":"t"}],"output":{"name":"l"}}],[5,"mergesort_list_of_tree2","","Demand-driven sort over a tree's leaves, whose elements are `Ord`. To the extent that the tree contains `name`s, the output is lazy, and thus sorts on-demand. Demanding the first element is `O(n)` for a tree with `n` leaves. Demanding the next element requires more comparisons, but fewer than the first element. Demanding the last element requires only `O(1)` comparisons. In total, the number of comparisons to demand the entire output is, as usual, `O(n ° log(n))`.",null,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"l"}}],[5,"mergesort_list_of_tree3","","Demand-driven sort over a tree's leaves, whose elements are `Ord`. To the extent that the tree contains `name`s, the output is lazy, and thus sorts on-demand. Demanding the first element is `O(n)` for a tree with `n` leaves. Demanding the next element requires more comparisons, but fewer than the first element. Demanding the last element requires only `O(1)` comparisons. In total, the number of comparisons to demand the entire output is, as usual, `O(n ° log(n))`.",null,{"inputs":[{"name":"t"},{"name":"option"}],"output":{"name":"l"}}],[5,"list_merge_wrapper","","",null,{"inputs":[{"name":"option"},{"name":"l"},{"name":"option"},{"name":"l"}],"output":{"name":"l"}}],[0,"trie","","",null,null],[3,"Meta","adapton::collections::trie","Metadata held by the root node.",null,null],[12,"min_depth","","",32,null],[4,"Trie","","Probablistically Balanced Trie Rough implementation of probabilistic tries from OOPSLA 2015 paper.",null,null],[13,"Nil","","",33,null],[13,"Leaf","","",33,null],[13,"Bin","","",33,null],[13,"Root","","",33,null],[13,"Name","","",33,null],[13,"Art","","",33,null],[5,"trie_fold","","",null,{"inputs":[{"name":"t"},{"name":"res"},{"name":"rc"}],"output":{"name":"res"}}],[5,"trie_of_list","","",null,{"inputs":[{"name":"l"}],"output":{"name":"t"}}],[6,"Set","","",null,null],[17,"PLACEMENT_SEED","","",null,null],[8,"MetaT","","",null,null],[10,"hash_seeded","","",34,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[8,"TrieIntro","","",null,null],[10,"nil","","",35,{"inputs":[{"name":"bs"}],"output":{"name":"self"}}],[10,"leaf","","",35,{"inputs":[{"name":"bs"},{"name":"x"}],"output":{"name":"self"}}],[10,"bin","","",35,{"inputs":[{"name":"bs"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"root","","",35,{"inputs":[{"name":"meta"},{"name":"self"}],"output":{"name":"self"}}],[10,"name","","",35,{"inputs":[{"name":"name"},{"name":"self"}],"output":{"name":"self"}}],[10,"art","","",35,{"inputs":[{"name":"art"}],"output":{"name":"self"}}],[10,"empty","","",35,{"inputs":[{"name":"meta"}],"output":{"name":"self"}}],[10,"singleton","","",35,{"inputs":[{"name":"meta"},{"name":"name"},{"name":"x"}],"output":{"name":"self"}}],[10,"extend","","",35,{"inputs":[{"name":"name"},{"name":"self"},{"name":"x"}],"output":{"name":"self"}}],[8,"TrieElim","","",null,null],[10,"find","","",36,{"inputs":[{"name":"self"},{"name":"x"},{"name":"i64"}],"output":{"name":"option"}}],[10,"is_empty","","",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"split_atomic","","",36,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"elim","","",36,{"inputs":[{"name":"self"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"rootc"},{"name":"namec"}],"output":{"name":"res"}}],[10,"elim_arg","","",36,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"rootc"},{"name":"namec"}],"output":{"name":"res"}}],[10,"elim_ref","","",36,{"inputs":[{"name":"self"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"rootc"},{"name":"namec"}],"output":{"name":"res"}}],[8,"SetIntro","","",null,null],[10,"empty","","",37,{"inputs":[],"output":{"name":"self"}}],[10,"add","","",37,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"self"}}],[8,"SetElim","","",null,null],[10,"mem","","",38,{"inputs":[{"name":"self"},{"name":"x"}],"output":{"name":"bool"}}],[10,"fold","","",38,{"inputs":[{"name":"self"},{"name":"res"},{"name":"rc"}],"output":{"name":"res"}}],[0,"raz","adapton::collections","Encodes collections as they have appeared in papers, e.g., as in Random Access Zipper (RAZ). Purely functional sequences with global access (via a balanced tree structure) and simple local edits (via a zipper structure).",null,null],[3,"Punc","adapton::collections::raz","Punctuation: Information that is interposed between each run of elements, and sometimes before and after them.  The RAZ uses user-chosen levels to probabilistically balance the Tree form. The RAZ uses the Name to identify cached computations in Adapton.",null,null],[12,"level","","",39,null],[12,"name","","",39,null],[3,"Zip","","The Zipper form consists of element sequences before (to the left of) and after (to the right of) a distinguished punctuation point in the sequence.",null,null],[4,"Tree","","A binary tree with vector leaves (aka, a \"rope\"), balanced probabilistically.",null,null],[13,"Nil","","Invariant: Nil only appears in certain edge positions",40,null],[13,"Leaf","","Invariant: Each element run in a Leaf is interposed between two `Punc`s",40,null],[13,"Bin","","(Non-trivial) Inductive case: Two balanced sub-trees, interposed with punctuation. Invariant: For balance, every Bin node in left/right subtrees has a equal-or-lower level.",40,null],[13,"Art","","(Trivial) Inductive case: An Adapton articulation.",40,null],[4,"Dir","","Distinguishes left (`L`) and right (`R`) traversal orders for various operations involving trees.",null,null],[13,"L","","",41,null],[13,"R","","",41,null],[4,"Edit","","An O(1)-sized change to the zipper: a single element insertion, replacement, removal; or, a local cursor movement by one element in either direction.",null,null],[13,"Insert","","",42,null],[13,"Replace","","",42,null],[13,"Remove","","",42,null],[13,"Move","","",42,null],[5,"zip_empty","","A zipper that consists of zero elements (and exactly one punctuation `p`).",null,{"inputs":[{"name":"punc"}],"output":{"name":"zip"}}],[5,"tree_empty","","A tree that consists of zero elements (and exactly one punctuation `p`).",null,{"inputs":[{"name":"punc"}],"output":{"name":"tree"}}],[5,"zip_insert","","Transform the zipper, inserting element `x` in the given direction `d`. The optional punctuation `p` follows the inserted element, in the given direction.",null,{"inputs":[{"name":"zip"},{"name":"dir"},{"name":"x"},{"name":"option"}],"output":{"name":"zip"}}],[5,"zip_edit","","Perform the given edit, in the given direction, at the current focus of the given zipper. The zipper is taken because its head vectors may be mutated, e.g., to insert or remove elements.",null,{"inputs":[{"name":"zip"},{"name":"edit"}],"output":{"name":"zip"}}],[5,"tree_append","","Appends the sequences of two trees",null,{"inputs":[{"name":"tree"},{"name":"tree"}],"output":{"name":"tree"}}],[5,"tree_of_zip","","Unfocuses the zipper into a tree form",null,{"inputs":[{"name":"zip"}],"output":{"name":"tree"}}],[5,"mergesort_eager","","Merge-sort the elements of the given tree, producing another tree, in ascending order (when `d = Dir::L`) or descending order (when `d = Dir::R`).",null,{"inputs":[{"name":"option"},{"name":"tree"},{"name":"dir"}],"output":{"name":"tree"}}],[11,"eq","","",39,{"inputs":[{"name":"self"},{"name":"punc"}],"output":{"name":"bool"}}],[11,"ne","","",39,{"inputs":[{"name":"self"},{"name":"punc"}],"output":{"name":"bool"}}],[11,"hash","","",39,null],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"punc"}}],[11,"eq","","",40,{"inputs":[{"name":"self"},{"name":"tree"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"self"},{"name":"tree"}],"output":{"name":"bool"}}],[11,"hash","","",40,null],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"tree"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"zip"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"self"},{"name":"zip"}],"output":{"name":"bool"}}],[11,"hash","","",43,null],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"zip"}}],[11,"eq","","",41,{"inputs":[{"name":"self"},{"name":"dir"}],"output":{"name":"bool"}}],[11,"hash","","",41,null],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"dir"}}],[11,"eq","","",42,{"inputs":[{"name":"self"},{"name":"edit"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"self"},{"name":"edit"}],"output":{"name":"bool"}}],[11,"hash","","",42,null],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"edit"}}],[8,"ListIntro","adapton::collections","Types that can be created like a list of `X` are `ListIntro<X>`",null,null],[10,"nil","","Introduce an empty list",44,{"inputs":[],"output":{"name":"self"}}],[10,"cons","","Introduce a Cons cell",44,{"inputs":[{"name":"x"},{"name":"self"}],"output":{"name":"self"}}],[10,"name","","Introduce a Name \"cons\" cell",44,{"inputs":[{"name":"name"},{"name":"self"}],"output":{"name":"self"}}],[10,"art","","Introduce a list with an articulation that holds a list",44,{"inputs":[{"name":"art"}],"output":{"name":"self"}}],[11,"singleton","","Creates a singleton list. Derived from `cons` and `nil` introduction forms.",44,{"inputs":[{"name":"x"}],"output":{"name":"self"}}],[11,"name_art","","For `Some(nm)`, wraps the given list in `name` and `art` constructors for given name `nm`. For `None`, is the list identity function.",44,{"inputs":[{"name":"option"},{"name":"self"}],"output":{"name":"self"}}],[8,"ListElim","","Types that can be pattern-matched like a list of `X` are `ListElim<X>`. We consider iterators to be a similar (nearly analogous) trait. The key distinction here are that list elimination is a pattern-match used with (pure) recursion, as opposed to an imperative for-loop, as is typical of iteration; further, lists in Adapton contain data (of type `X`) and names (of type `Name`).",null,null],[10,"elim","","Eliminate a list with the given functions (for the pattern match arms) that handle the `nil`, `cons` and `name` cases. Eliminates the `art` case internally, by forcing the art and eliminating the resulting list with the given handler functions; forces multiple `art` cases, if need be.",45,{"inputs":[{"name":"self"},{"name":"nilf"},{"name":"consf"},{"name":"namef"}],"output":{"name":"res"}}],[10,"elim_arg","","Like `elim`, except that the functions are given an additional argument.  This variant is needed due to the move semantics of Rust. The argument is moved into the body of the activated handler function when it is applied.",45,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"nilf"},{"name":"consf"},{"name":"namef"}],"output":{"name":"res"}}],[11,"is_empty","","Tests if the list contains any `cons` cells. Derived from `elim`.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_name","","Tests if the head of the list consists of a `name` constructor. Derived from `elim`.",45,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"RoseIntro","","Rose Trees: A tree with arbitrary branching at each node. See also, Definition 2 (page 2) of   *Parallel Implementation of Tree Skeletons*, by D.B. Skillicorn 1995.",null,null],[16,"List","","",46,null],[10,"leaf","","Introduce a leaf with exactly zero children",46,{"inputs":[{"name":"leaf"}],"output":{"name":"self"}}],[10,"branch","","Introduce a branch with zero or more subtrees",46,null],[10,"name","","Introduce a Named subtree",46,{"inputs":[{"name":"name"},{"name":"self"}],"output":{"name":"self"}}],[10,"art","","Introduce a list with an articulation that holds a list",46,{"inputs":[{"name":"art"}],"output":{"name":"self"}}],[8,"RoseElim","","Rose Trees: A tree with arbitrary branching at each node. See also, Definition 2 (page 2) of   *Parallel Implementation of Tree Skeletons*, by D.B. Skillicorn 1995.",null,null],[16,"Children","","",47,null],[10,"elim","","",47,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"leaffn"},{"name":"branchfn"},{"name":"namefn"}],"output":{"name":"res"}}],[8,"Level","","Levels for a probabilistically-balanced trees. For more details see Pugh and Teiltelbaum's POPL 1989 paper, and its \"Chunky List\" representation (*Incremental Computation via Function Caching*).",null,null],[10,"new","","",48,{"inputs":[{"name":"x"}],"output":{"name":"self"}}],[10,"bits","","",48,{"inputs":[],"output":{"name":"self"}}],[10,"zero","","",48,{"inputs":[],"output":{"name":"self"}}],[10,"inc","","",48,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"add","","",48,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"lte","","",48,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[10,"max_val","","",48,{"inputs":[],"output":{"name":"self"}}],[11,"max","","",48,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"TreeIntro","","Types that can be created like a (binary) tree with leaves of type `Leaf` are `TreeIntro<Leaf>`. We recognize that monoids are a nearly-analogous case; the key differences with monoids are that trees contain names (see `name` fn) and articulations (see `art` fn); further, the binary cases `name` and `bin` carry levels of type `Lev`, which helps establish and maintain balance.",null,null],[10,"nil","","",49,{"inputs":[],"output":{"name":"self"}}],[10,"leaf","","",49,{"inputs":[{"name":"leaf"}],"output":{"name":"self"}}],[10,"bin","","",49,{"inputs":[{"name":"lev"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"name","","",49,{"inputs":[{"name":"name"},{"name":"lev"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"art","","",49,{"inputs":[{"name":"art"}],"output":{"name":"self"}}],[8,"TreeElim","","",null,null],[10,"lev_of_tree","","",50,{"inputs":[{"name":"self"}],"output":{"name":"lev"}}],[10,"elim","","",50,{"inputs":[{"name":"self"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"namec"}],"output":{"name":"res"}}],[10,"elim_ref","","",50,{"inputs":[{"name":"self"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"namec"}],"output":{"name":"res"}}],[10,"elim_arg","","",50,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"namec"}],"output":{"name":"res"}}],[10,"full_move","","",50,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"namec"},{"name":"artc"}],"output":{"name":"res"}}],[11,"is_empty","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_nil","","",50,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[8,"MapIntro","","",null,null],[10,"empty","","",51,{"inputs":[],"output":{"name":"self"}}],[10,"update","","",51,{"inputs":[{"name":"self"},{"name":"dom"},{"name":"cod"}],"output":{"name":"self"}}],[8,"MapElim","","",null,null],[10,"find","","",52,{"inputs":[{"name":"self"},{"name":"dom"}],"output":{"name":"option"}}],[10,"remove","","",52,null],[10,"fold","","",52,{"inputs":[{"name":"self"},{"name":"res"},{"name":"rc"}],"output":{"name":"res"}}],[10,"append","","",52,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"SetIntro","","",null,null],[10,"empty","","",53,{"inputs":[],"output":{"name":"self"}}],[10,"add","","",53,{"inputs":[{"name":"self"},{"name":"elm"}],"output":{"name":"self"}}],[10,"remove","","",53,{"inputs":[{"name":"self"},{"name":"elm"}],"output":{"name":"self"}}],[10,"union","","",53,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"inter","","",53,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"diff","","",53,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[8,"SetElim","","",null,null],[10,"is_mem","","",54,{"inputs":[{"name":"self"},{"name":"elm"}],"output":{"name":"bool"}}],[10,"fold","","",54,{"inputs":[{"name":"self"},{"name":"res"},{"name":"f"}],"output":{"name":"res"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"dir2"}}],[11,"hash","","",28,null],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"dir2"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"hash","","",29,null],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"self"},{"name":"tree"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"self"},{"name":"tree"}],"output":{"name":"bool"}}],[11,"hash","","",30,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"tree"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"nameelse"}}],[11,"eq","","",31,{"inputs":[{"name":"self"},{"name":"nameelse"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"self"},{"name":"nameelse"}],"output":{"name":"bool"}}],[11,"hash","","",31,null],[11,"nil","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"cons","","",29,{"inputs":[{"name":"x"},{"name":"self"}],"output":{"name":"self"}}],[11,"name","","",29,{"inputs":[{"name":"name"},{"name":"self"}],"output":{"name":"self"}}],[11,"art","","",29,{"inputs":[{"name":"art"}],"output":{"name":"self"}}],[11,"elim","","",29,{"inputs":[{"name":"self"},{"name":"nilf"},{"name":"consf"},{"name":"namef"}],"output":{"name":"res"}}],[11,"elim_arg","","",29,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"nilf"},{"name":"consf"},{"name":"namef"}],"output":{"name":"res"}}],[11,"empty","","",29,{"inputs":[],"output":{"name":"self"}}],[11,"update","","",29,{"inputs":[{"name":"self"},{"name":"dom"},{"name":"cod"}],"output":{"name":"self"}}],[11,"find","","",29,{"inputs":[{"name":"self"},{"name":"dom"}],"output":{"name":"option"}}],[11,"remove","","",29,null],[11,"fold","","",29,{"inputs":[{"name":"self"},{"name":"res"},{"name":"rc"}],"output":{"name":"res"}}],[11,"append","","",29,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"nil","","",30,{"inputs":[],"output":{"name":"self"}}],[11,"leaf","","",30,{"inputs":[{"name":"leaf"}],"output":{"name":"self"}}],[11,"bin","","",30,{"inputs":[{"name":"usize"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"name","","",30,{"inputs":[{"name":"name"},{"name":"usize"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"art","","",30,{"inputs":[{"name":"art"}],"output":{"name":"self"}}],[11,"elim_arg","","",30,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"namec"}],"output":{"name":"res"}}],[11,"full_move","","",30,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"namec"},{"name":"artc"}],"output":{"name":"res"}}],[11,"elim","","",30,{"inputs":[{"name":"self"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"namec"}],"output":{"name":"res"}}],[11,"elim_ref","","",30,{"inputs":[{"name":"self"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"namec"}],"output":{"name":"res"}}],[11,"lev_of_tree","","",30,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fmt","adapton::collections::trie","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"self"},{"name":"trie"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"self"},{"name":"trie"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"trie"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"self"},{"name":"meta"}],"output":{"name":"bool"}}],[11,"hash","","",32,null],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"meta"}}],[11,"hash_seeded","","",32,{"inputs":[{"name":"self"},{"name":"u64"}],"output":null}],[11,"nil","","",33,{"inputs":[{"name":"bs"}],"output":{"name":"self"}}],[11,"leaf","","",33,{"inputs":[{"name":"bs"},{"name":"x"}],"output":{"name":"self"}}],[11,"bin","","",33,{"inputs":[{"name":"bs"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[11,"root","","",33,{"inputs":[{"name":"meta"},{"name":"self"}],"output":{"name":"self"}}],[11,"name","","",33,{"inputs":[{"name":"name"},{"name":"self"}],"output":{"name":"self"}}],[11,"art","","",33,{"inputs":[{"name":"art"}],"output":{"name":"self"}}],[11,"empty","","",33,{"inputs":[{"name":"meta"}],"output":{"name":"self"}}],[11,"singleton","","",33,{"inputs":[{"name":"meta"},{"name":"name"},{"name":"x"}],"output":{"name":"self"}}],[11,"extend","","",33,{"inputs":[{"name":"name"},{"name":"self"},{"name":"x"}],"output":{"name":"self"}}],[11,"hash","","",33,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"find","","",33,{"inputs":[{"name":"self"},{"name":"x"},{"name":"i64"}],"output":{"name":"option"}}],[11,"is_empty","","",33,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"split_atomic","","",33,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"elim","","",33,{"inputs":[{"name":"self"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"rootc"},{"name":"namec"}],"output":{"name":"res"}}],[11,"elim_arg","","",33,{"inputs":[{"name":"self"},{"name":"arg"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"rootc"},{"name":"namec"}],"output":{"name":"res"}}],[11,"elim_ref","","",33,{"inputs":[{"name":"self"},{"name":"nilc"},{"name":"leafc"},{"name":"binc"},{"name":"rootc"},{"name":"namec"}],"output":{"name":"res"}}],[11,"clone","adapton::engine::reflect::trace","",21,{"inputs":[{"name":"self"}],"output":{"name":"alloccase"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"allockind"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"forcecase"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"effect"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"edge"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"trace"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","adapton::engine::reflect","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"val"}}],[11,"hash","","",14,null],[11,"eq","","",14,{"inputs":[{"name":"self"},{"name":"val"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"self"},{"name":"val"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"const"}}],[11,"hash","","",15,null],[11,"eq","","",15,{"inputs":[{"name":"self"},{"name":"const"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"self"},{"name":"const"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"artcontent"}}],[11,"hash","","",16,null],[11,"eq","","",16,{"inputs":[{"name":"self"},{"name":"artcontent"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"self"},{"name":"artcontent"}],"output":{"name":"bool"}}],[11,"eq","","",6,{"inputs":[{"name":"self"},{"name":"loc"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"self"},{"name":"loc"}],"output":{"name":"bool"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"loc"}}],[11,"fmt","","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"effect"}}],[11,"eq","","",17,{"inputs":[{"name":"self"},{"name":"effect"}],"output":{"name":"bool"}}],[11,"hash","","",17,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"succ"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"succ"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"succ"}],"output":{"name":"bool"}}],[11,"hash","","",7,null],[11,"reflect","","",7,{"inputs":[{"name":"self"}],"output":{"name":"succ"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"pred"}}],[11,"eq","","",8,{"inputs":[{"name":"self"},{"name":"pred"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"self"},{"name":"pred"}],"output":{"name":"bool"}}],[11,"hash","","",8,null],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"compnode"}}],[11,"eq","","",9,{"inputs":[{"name":"self"},{"name":"compnode"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"self"},{"name":"compnode"}],"output":{"name":"bool"}}],[11,"hash","","",9,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"refnode"}}],[11,"eq","","",10,{"inputs":[{"name":"self"},{"name":"refnode"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"self"},{"name":"refnode"}],"output":{"name":"bool"}}],[11,"hash","","",10,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"purenode"}}],[11,"eq","","",11,{"inputs":[{"name":"self"},{"name":"purenode"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"self"},{"name":"purenode"}],"output":{"name":"bool"}}],[11,"hash","","",11,null],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"node"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"node"}],"output":{"name":"bool"}}],[11,"hash","","",18,null],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"frame"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"dcg"}}],[14,"prog_pt","adapton","",null,null],[14,"thunk","","",null,null],[14,"memo","","",null,null],[14,"eager","","",null,null],[14,"cell_call","","",null,null]],"paths":[[3,"ProgPt"],[3,"Flags"],[3,"DCG"],[3,"Cnt"],[4,"Engine"],[4,"ArtIdChoice"],[3,"Loc"],[3,"Succ"],[3,"Pred"],[3,"CompNode"],[3,"RefNode"],[3,"PureNode"],[3,"Frame"],[3,"DCG"],[4,"Val"],[4,"Const"],[4,"ArtContent"],[4,"Effect"],[4,"Node"],[3,"Edge"],[3,"Trace"],[4,"AllocCase"],[4,"AllocKind"],[4,"ForceCase"],[4,"Effect"],[8,"Reflect"],[3,"Name"],[3,"Art"],[4,"Dir2"],[4,"List"],[4,"Tree"],[4,"NameElse"],[3,"Meta"],[4,"Trie"],[8,"MetaT"],[8,"TrieIntro"],[8,"TrieElim"],[8,"SetIntro"],[8,"SetElim"],[3,"Punc"],[4,"Tree"],[4,"Dir"],[4,"Edit"],[3,"Zip"],[8,"ListIntro"],[8,"ListElim"],[8,"RoseIntro"],[8,"RoseElim"],[8,"Level"],[8,"TreeIntro"],[8,"TreeElim"],[8,"MapIntro"],[8,"MapElim"],[8,"SetIntro"],[8,"SetElim"]]};
searchIndex["adapton_lab"] = {"doc":"For more information and instructions, see the Adapton Lab README.","items":[[0,"labdef","adapton_lab","Defines lab parameters `LabParams` and `LabDef`, the parameters for running the test diagram from the Adapton Lab README.",null,null],[3,"GenerateParams","adapton_lab::labdef","Parameters for generating and editing input; See `README.md` for more.",null,null],[12,"size","","",0,null],[12,"gauge","","",0,null],[12,"nominal_strategy","","",0,null],[3,"LabDef","","_lab definition_: generic notion of an incremental computation that can be evaluated and tested.  We instantiate this structure once for each test in our test suite.  We implement the `LabDef` trait generically for this structure.  See `catalog` module for example instances.",null,null],[12,"identity","","",1,null],[12,"url","","",1,null],[12,"editor","","",1,null],[12,"archivist","","",1,null],[12,"input","","",1,null],[12,"editst","","",1,null],[12,"output","","",1,null],[3,"LabParams","","Parameters to running a single lab experiment.",null,null],[12,"sample_params","","",2,null],[12,"change_batch_loopc","","Number of change-batches to perform in a loop; each is interposed with computing the new output.",2,null],[3,"SampleParams","","Parameters for collecting a single sample.  In addition to these parameters, the experiment maintains a Rng based on the input_seeds, below; this Rng is given to Edit::edit to generate psuedo-random edits, in batches.  For each engine, this Rng is sequenced across successive samples.  Given an input_seeds vector, there is one unique Rng sequence for each engine's sequence of samples.",null,null],[12,"input_seeds","","We convert this seed into a random-number-generator before generating and editing.",3,null],[12,"generate_params","","Other parameters for generating the input.",3,null],[12,"demand","","_demand_: For lazy algorithms, the number of output elements to force, e.g., by producing a vector of output data.  Eager algorithms ignore this parameter (they always produce _all_ of their output).",3,null],[12,"validate_output","","Whether to validate the output after each computation using the naive and DCG engines",3,null],[12,"change_batch_size","","Size of each batch of changes.",3,null],[12,"reflect_trace","","Reflect the trace (See `adapton::engine::reflect::trace::Trace`).",3,null],[12,"reflect_dcg","","Reflect the DCG (See `adapton::engine::reflect::DCG`), including its values (See `adapton::engine::reflect_val`).",3,null],[3,"LabResults","","The result of a lab is a sequence of samples.",null,null],[12,"samples","","",4,null],[3,"Sample","","The experiment consists of a loop over samples.  For each sample, we switch back and forth between using the Naive engine, and using the DCG engine.  We want to interleave this way for each sample in order to compare outputs and metrics (counts and timings) on a fine-grained scale.",null,null],[12,"batch_name","","",5,null],[12,"dcg_sample","","",5,null],[12,"naive_sample","","",5,null],[12,"output_valid","","",5,null],[3,"EngineSample","","To sample a single engine, we record metrics for processing the input (left vertical edge in `README.md` diagram).",null,null],[12,"process_input","","TODO: Rename: 'editor' (for editor role)",6,null],[12,"compute_output","","TODO: Rename: 'archivist' (for archivist role)",6,null],[12,"input","","",6,null],[12,"output","","",6,null],[3,"EngineMetrics","","For each engine, for each sampled subcomputation, we record the real time (in nanoseconds) and engine-based counters for DCG costs.",null,null],[12,"time_ns","","Time in milliseconds.",7,null],[12,"engine_cnt","","Counts of engine (engine trace-level) operations (See `engine::reflect::trace::Trace`) during the sample.",7,null],[12,"reflect_traces","","The reflected traces of the DCG during the sample; empty if this option is disabled.",7,null],[12,"reflect_dcg","","The reflected version of the DCG, at the conclusion of the sample; None if this option is disabled.",7,null],[4,"NominalStrategy","","A bit that controls how names are placed in the input; See `README.md` for more.",null,null],[13,"Regular","","",8,null],[13,"ByContent","","",8,null],[8,"Generate","","Generic method for generating a random input. See `README.md` for more.",null,null],[10,"generate","","",9,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"t"}}],[8,"Edit","","Generic process for editing an input randomly, in a stateful sequence of edits. See `README.md` for more.",null,null],[10,"edit_init","","",10,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"s"}}],[10,"edit","","",10,null],[8,"Compute","","Generic notion of a computation to run naively and incrementally. It has specific `Input` and `Output` types, and a way to `compute` the `Output` from the `Input`. See `README.md` for more.",null,null],[10,"compute","","",11,{"inputs":[{"name":"input"}],"output":{"name":"output"}}],[8,"ComputeDemand","","Like Compute, but also provides a `demand` size, for lazy algorithms.",null,null],[10,"compute","","",12,{"inputs":[{"name":"input"},{"name":"usize"}],"output":{"name":"output"}}],[8,"Lab","","_lab_: Abstracts over parts of a lab definition of type `LabDef`: Hides the `Input`, `Output` and `Archivist` types of a `LabDef`.",null,null],[10,"name","","",13,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[10,"url","","",13,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"run","","",13,{"inputs":[{"name":"self"},{"name":"labparams"}],"output":{"name":"labresults"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"nominalstrategy"}}],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"generateparams"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"labparams"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"sampleparams"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"labresults"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"sample"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"enginesample"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"enginemetrics"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"labviz","adapton_lab","This module of Adapton Lab extends Adapton's existing reflection (see `adapton::engine::reflect`) with further reflections.  In particular, we produce HTML output structure, for human user interaction and consumption.",null,null],[3,"Div","adapton_lab::labviz","The `Div` struct represents a restricted form of a `<div>` element in HTML.  The field `tag` is a string, which corresponds to a distinguished `tag` CSS class that indicates the Rust datatype reflected into this `Div`.  The other CSS `classes` hold bits that signal various subcases (e.g., of `enum`s in the `reflect` module).  For Rust structures that have subfields and/or substructure, the `Div`'s `extent` field lists their reflections into `Div`s.  In principle, the produced `Div` structure has an equivalent amount of information to the corresponding Rust datatype, and could be \"parsed\" back into this Rust datatype later (let's not do that, though!).  The text field is useful for `Div` versions of `Name`s, for giving the text of the name.",null,null],[12,"tag","","",14,null],[12,"classes","","",14,null],[12,"extent","","",14,null],[12,"text","","",14,null],[5,"div_of_name","","",null,{"inputs":[{"name":"name"}],"output":{"name":"div"}}],[5,"div_of_path","","",null,{"inputs":[{"name":"path"}],"output":{"name":"div"}}],[5,"div_of_loc","","",null,{"inputs":[{"name":"loc"}],"output":{"name":"div"}}],[5,"div_of_oploc","","",null,{"inputs":[{"name":"option"}],"output":{"name":"div"}}],[5,"div_of_succ","","",null,{"inputs":[{"name":"succ"}],"output":{"name":"div"}}],[5,"div_of_edge","","",null,{"inputs":[{"name":"edge"}],"output":{"name":"div"}}],[5,"div_of_value_tree","","",null,{"inputs":[{"name":"dcg"},{"name":"hashmap"},{"name":"val"}],"output":{"name":"div"}}],[5,"div_of_force_tree","","",null,{"inputs":[{"name":"dcg"},{"name":"hashmap"},{"name":"loc"}],"output":{"name":"div"}}],[5,"div_of_alloc_tree","","",null,{"inputs":[{"name":"dcg"},{"name":"hashmap"},{"name":"loc"}],"output":{"name":"div"}}],[5,"class_of_dcg_node","","",null,{"inputs":[{"name":"node"}],"output":{"name":"string"}}],[5,"div_of_dcg_alloc_edge","","",null,{"inputs":[{"name":"option"},{"name":"loc"},{"name":"node"},{"name":"bool"}],"output":{"name":"div"}}],[5,"div_of_dcg_succs","","",null,{"inputs":[{"name":"dcg"},{"name":"hashmap"},{"name":"option"},{"name":"vec"},{"name":"vec"}],"output":null}],[5,"div_of_dcg_force_edge","","",null,{"inputs":[{"name":"option"},{"name":"dcg"},{"name":"hashmap"},{"name":"loc"},{"name":"bool"}],"output":{"name":"div"}}],[5,"div_of_trace","","",null,{"inputs":[{"name":"trace"}],"output":{"name":"div"}}],[5,"write_lab_results_summary","","",null,{"inputs":[{"name":"labparams"},{"name":"vec"},{"name":"vec"}],"output":null}],[5,"write_cr","","",null,{"inputs":[{"name":"w"}],"output":null}],[5,"write_lab_name","","",null,{"inputs":[{"name":"w"},{"name":"box"},{"name":"bool"}],"output":null}],[5,"write_dcg_tree","","",null,{"inputs":[{"name":"w"},{"name":"dcg"},{"name":"vec"}],"output":null}],[5,"write_dcg_edge_tree","","",null,{"inputs":[{"name":"w"},{"name":"dcg"},{"name":"vec"},{"name":"effect"}],"output":null}],[5,"write_sample_dcg","","",null,{"inputs":[{"name":"w"},{"name":"box"},{"name":"option"},{"name":"sample"}],"output":null}],[5,"write_lab_results","","",null,{"inputs":[{"name":"labparams"},{"name":"box"},{"name":"labresults"}],"output":null}],[5,"style_string","","",null,{"inputs":[],"output":{"name":"str"}}],[8,"WriteHTML","","",null,null],[10,"write_html","","",15,{"inputs":[{"name":"self"},{"name":"wr"}],"output":null}],[11,"fmt","","",14,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"div"}}],[11,"write_html","","",14,{"inputs":[{"name":"self"},{"name":"wr"}],"output":null}],[0,"labrun","adapton_lab","**Generically implements** the test diagram in the Adapton Lab README.",null,null],[3,"LabEngineState","adapton_lab::labrun","",null,null],[12,"engine","","",16,null],[12,"input","","",16,null],[3,"LabState","","",null,null],[12,"params","","",17,null],[12,"rng","","",17,null],[12,"change_batch_num","","",17,null],[12,"dcg_state","","",17,null],[12,"naive_state","","",17,null],[12,"samples","","",17,null],[8,"SampleGen","","",null,null],[10,"sample","","",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"sample","","",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"name","adapton_lab::labdef","",1,{"inputs":[{"name":"self"}],"output":{"name":"name"}}],[11,"url","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"run","","",1,{"inputs":[{"name":"self"},{"name":"labparams"}],"output":{"name":"labresults"}}],[0,"catalog","adapton_lab","Provides **concrete instances** of the test diagram from the Adapton Lab README.",null,null],[3,"UniformInsert","adapton_lab::catalog","",null,null],[3,"ExampleCleanDirty","","Simple example to explain Adapton's dirtying + cleaning algorithms.",null,null],[3,"EditorOopsla2015Sec2","","This list editor mimics the editor in the example from _Incremental Computation with Names_ (2015), Section 2 (Figs 1 and 2).",null,null],[3,"UniformPrepend","","",null,null],[3,"LazyMap","","",null,null],[3,"EagerMap","","",null,null],[3,"EagerMap2","","",null,null],[3,"SimpEagerMap","","",null,null],[3,"LazyFilter","","",null,null],[3,"EagerFilter","","",null,null],[3,"ListTree","","",null,null],[3,"ListTreeMax","","",null,null],[3,"ListTreeSum","","",null,null],[3,"ListReverse","","",null,null],[3,"LazyMergesort3","","",null,null],[3,"EagerMergesort3","","",null,null],[3,"LazyMergesort2","","",null,null],[3,"EagerMergesort2","","",null,null],[3,"LazyMergesort1","","",null,null],[3,"EagerMergesort1","","",null,null],[3,"Quickhull","","",null,null],[3,"RazMax","","",null,null],[5,"all_labs","","`all_labs`: This is the master list of all labs in the current Adapton Lab catalog (which consists of this module, but which wraps the Adapton crate's collections module).",null,{"inputs":[],"output":{"name":"vec"}}],[0,"oopsla2015_sec2","","Program `list_map` running on a small, changing input list. It is simpler than the version from the Adapton collections library.",null,null],[3,"Editor","adapton_lab::catalog::oopsla2015_sec2","The _Editor_ in this example generates a three-element initial list, then inserts an additional element.",null,null],[3,"Archivist","","The _Archivist_ in this example maps the input list to an output list, using the names of the input list.",null,null],[4,"List","","`Cons` cells carry an element, name and reference cell for the rest of the list.",null,null],[13,"Nil","","",19,null],[13,"Cons","","",19,null],[5,"list_map","","List map, as shown in 'Incremental Computation with Names', Section 2:",null,{"inputs":[{"name":"list"},{"name":"rc"}],"output":{"name":"list"}}],[5,"list_map_cons","","This is the code that we memoize each time we see a name in a `Cons` cell.  We identify this memo point using the names from the list.",null,{"inputs":[{"name":"x"},{"name":"name"},{"name":"art"},{"name":"rc"}],"output":{"name":"list"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"self"},{"name":"list"}],"output":{"name":"bool"}}],[11,"hash","","",19,null],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"list"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"editor"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"archivist"}}],[11,"fmt","","",21,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compute","","",21,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"generate","","",20,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"list"}}],[11,"edit_init","","",20,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"usize"}}],[11,"edit","","",20,null],[11,"clone","adapton_lab::catalog","",22,{"inputs":[{"name":"self"}],"output":{"name":"uniforminsert"}}],[11,"fmt","","",22,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"examplecleandirty"}}],[11,"fmt","","",23,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"generate","","",23,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"art"}}],[11,"edit_init","","",23,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"usize"}}],[11,"edit","","",23,null],[11,"compute","","",23,{"inputs":[{"name":"art"}],"output":{"name":"art"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"editoroopsla2015sec2"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"generate","","",24,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"list"}}],[11,"edit_init","","",24,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"usize"}}],[11,"edit","","",24,null],[11,"generate","","",22,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"raztree"}}],[11,"edit_init","","",22,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"usize"}}],[11,"edit","","",22,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"uniformprepend"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"generate","","",25,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"list"}}],[11,"edit_init","","",25,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"usize"}}],[11,"edit","","",25,null],[11,"generate","","",25,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"list"}}],[11,"edit_init","","",25,{"inputs":[{"name":"r"},{"name":"generateparams"}],"output":{"name":"usize"}}],[11,"edit","","",25,null],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"lazymap"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"eagermap"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"eagermap2"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"simpeagermap"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"lazyfilter"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"eagerfilter"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"listtree"}}],[11,"fmt","","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"listtreemax"}}],[11,"fmt","","",33,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"listtreesum"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"listreverse"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"lazymergesort3"}}],[11,"fmt","","",36,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"eagermergesort3"}}],[11,"fmt","","",37,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"lazymergesort2"}}],[11,"fmt","","",38,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"eagermergesort2"}}],[11,"fmt","","",39,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"lazymergesort1"}}],[11,"fmt","","",40,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"eagermergesort1"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"quickhull"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"razmax"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"compute","","",27,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"compute","","",28,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"compute","","",31,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"compute","","",26,{"inputs":[{"name":"list"},{"name":"usize"}],"output":{"name":"list"}}],[11,"compute","","",30,{"inputs":[{"name":"list"},{"name":"usize"}],"output":{"name":"list"}}],[11,"compute","","",35,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"compute","","",32,{"inputs":[{"name":"list"}],"output":{"name":"tree"}}],[11,"compute","","",33,{"inputs":[{"name":"list"}],"output":{"name":"usize"}}],[11,"compute","","",34,{"inputs":[{"name":"list"}],"output":{"name":"usize"}}],[11,"compute","","",36,{"inputs":[{"name":"list"},{"name":"usize"}],"output":{"name":"list"}}],[11,"compute","","",37,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"compute","","",38,{"inputs":[{"name":"list"},{"name":"usize"}],"output":{"name":"list"}}],[11,"compute","","",39,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"compute","","",40,{"inputs":[{"name":"list"},{"name":"usize"}],"output":{"name":"list"}}],[11,"compute","","",41,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"compute","","",42,{"inputs":[{"name":"list"}],"output":{"name":"list"}}],[11,"compute","","",43,{"inputs":[{"name":"raztree"}],"output":{"name":"usize"}}],[14,"labdef","adapton_lab","",null,null]],"paths":[[3,"GenerateParams"],[3,"LabDef"],[3,"LabParams"],[3,"SampleParams"],[3,"LabResults"],[3,"Sample"],[3,"EngineSample"],[3,"EngineMetrics"],[4,"NominalStrategy"],[8,"Generate"],[8,"Edit"],[8,"Compute"],[8,"ComputeDemand"],[8,"Lab"],[3,"Div"],[8,"WriteHTML"],[3,"LabEngineState"],[3,"LabState"],[8,"SampleGen"],[4,"List"],[3,"Editor"],[3,"Archivist"],[3,"UniformInsert"],[3,"ExampleCleanDirty"],[3,"EditorOopsla2015Sec2"],[3,"UniformPrepend"],[3,"LazyMap"],[3,"EagerMap"],[3,"EagerMap2"],[3,"SimpEagerMap"],[3,"LazyFilter"],[3,"EagerFilter"],[3,"ListTree"],[3,"ListTreeMax"],[3,"ListTreeSum"],[3,"ListReverse"],[3,"LazyMergesort3"],[3,"EagerMergesort3"],[3,"LazyMergesort2"],[3,"EagerMergesort2"],[3,"LazyMergesort1"],[3,"EagerMergesort1"],[3,"Quickhull"],[3,"RazMax"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as red bold text or blue underlined text, on ANSI terminals.","items":[[3,"ANSIString","ansi_term","An ANSI String is a string coupled with the Style to display it in a terminal.",null,null],[3,"Style","","A style is a collection of properties that can format a string using ANSI escape codes.",null,null],[3,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a minimum of control characters.",null,null],[12,"0","","",0,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer to either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",1,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",1,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",1,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",1,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",1,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",1,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",1,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",1,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal environments.",1,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",1,null],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"ansistring"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"ansistring"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"ansistring"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",2,{"inputs":[{"name":"s"}],"output":{"name":"ansistring"}}],[11,"deref","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"colour"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string. This is a short-cut so you don't have to use Blue.normal() just to get blue text.",1,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the strikethrough property set.",1,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",1,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"self"},{"name":"style"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates a new Style with no differences.",3,{"inputs":[],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",3,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"strikethrough","","Returns a Style with the hidden property set.",3,{"inputs":[{"name":"self"}],"output":{"name":"style"}}],[11,"fg","","Returns a Style with the foreground colour property set.",3,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",3,{"inputs":[{"name":"self"},{"name":"colour"}],"output":{"name":"style"}}],[11,"default","","",3,{"inputs":[],"output":{"name":"style"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"ANSIStrings"],[4,"Colour"],[3,"ANSIString"],[3,"Style"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style bitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["clap"] = {"doc":"`clap` is a simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and relationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, \"Any of these arguments\". By placing arguments in a logical group, you can create easier requirement and exclusion rules instead of having to list each argument individually, or when you want a rule to apply \"any but not all\" arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by the user. New instances of this struct are obtained by using the [`App::get_matches`] family of methods.",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`] method.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`] method. Usage of this iterator allows values which contain invalid UTF-8 code points unlike [`Values`].",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line arguments. Application settings are set using the \"builder pattern\" with the [`App::get_matches`] family of methods being the terminal methods that starts the runtime-parsing process. These methods then return information about the user supplied arguments (or lack there of).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formated error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter methods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`] [`Arg::set`]: ./struct.Arg.html#method.set [`Arg::unset`]: ./struct.Arg.html#method.unset [`Arg::is_set`]: ./struct.Arg.html#method.is_set",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,null],[13,"EmptyValues","","The argument allows empty values such as `--option \"\"`",1,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`] [`SubCommand`]: ./struct.SubCommand.html",1,null],[13,"Hidden","","The argument should **not** be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as `--option <value>`",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimter",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,null],[13,"HidePossibleValues","","Hides the possible values from the help string",1,null],[13,"AllowLeadingHyphen","","Allows vals that start with a '-'",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should *not* be treated as an error. This is the default behavior of `clap`.",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument *values*, such as negative numbers like `-10`. (which would otherwise be parsed as another flag or option)",2,null],[13,"AllowNegativeNumbers","","Allows negative numbers to pass as values. This is similar to `AllowLeadingHyphen` except that it only allows numbers, all other undefined leading hyphens will fail to parse.",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a [`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within the [`ArgMatches`] struct.",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no arguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`] was used.",2,null],[13,"DisableVersion","","Disables `-V` and `--version` [`App`] without affecting any of the [`SubCommand`]s (Defaults to `false`; application *does* have a version flag)",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were declared in, and not alphabetically which is the default.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]s. (Defaults to `false`; subcommands have independant version strings from their parents.)",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` *not* to print possible values when displaying help information. This can be useful if there are many values, or they are explained elsewhere.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name. This is normally the case when using a \"daemon\" style mode, or an interactive CLI where one one would not normally type the binary or program name for each command.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument.",2,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you had a subcommand or top level application with a required argument that is only required as long as there is no subcommand present, using this setting would allow you to set those arguments to [`Arg::required(true)`] and yet receive no error so long as the user uses a valid subcommand instead.",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (before exiting gracefully) if no [`SubCommand`]s are present at runtime (i.e. an empty run such as `$ myprog`).",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail with a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit gracefully.",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a \"VarArg\" and that `clap` should not attempt to parse any further args.",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together, presenting a more unified help message (a la `getopts` or `docopt` style).",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands *do* have version flags.)",2,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait for user before exiting",2,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which isn't in that set.",3,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, argument or subcommand which isn't defined.",3,null],[13,"InvalidSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which meets the threshold for being similar enough to an existing subcommand. If it doesn't meet the threshold, or the 'suggestions' feature is disabled, the more general [`UnknownArgument`] error is returned.",3,null],[13,"UnrecognizedSubcommand","","Occurs when the user provides an unrecognized [`SubCommand`] which either doesn't meet the threshold for being similar enough to an existing subcommand, or the 'sggestions' feature is disabled. Otherwise the more detailed [`InvalidSubcommand`] error is returned.",3,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty values.",3,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the value fails that validation.",3,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting [`Arg::max_values`].",3,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting [`Arg::min_values`].",3,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what's been defined by setting [`Arg::number_of_values`] or than was implicitly set by [`Arg::value_names`].",3,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can't be used together.",3,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]), but the user does not provide one.",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by [`AppSettings::ArgRequiredElseHelp`], but the user did not provide one.",3,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides multiple values to an argument which doesn't allow that.",3,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and [`AppSettings::StrictUtf8`] is set.",3,null],[13,"HelpDisplayed","","Not a true \"error\" as it means `--help` or similar was used. The help message will be sent to `stdout`.",3,null],[13,"VersionDisplayed","","Not a true \"error\" as it means `--version` or similar was used. The message will be sent to `stdout`.",3,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value into type `T`, but the argument you requested wasn't used. I.e. you asked for an argument with name `config` to be converted, but `config` wasn't used by the user. [`value_t!`]: ./macro.value_t!.html [`values_t!`]: ./macro.values_t!.html",3,null],[13,"Io","","Represents an [I/O error]. Can occur when writing to `stderr` or `stdout` or reading a configuration file. [I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,null],[13,"Format","","Represents a Format error. Typically caused by writing to `stderr` or `stdout`. [`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html [Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .bash-completion completion file for the Bourne Again SHell (BASH)",4,null],[13,"Fish","","Generates a .fish completion file for the Friendly Interactive SHell (fish)",4,null],[13,"Zsh","","Generates a completion file for the Z SHell (ZSH)",4,null],[13,"PowerShell","","Generates a completion file for PowerShell",4,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"appsettings"}}],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn't have to be same as the binary. The name will be displayed to the user when they request to print version or help and usage information.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"get_name","","Get the name of the app",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"get_bin_name","","Get the name of the binary",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"with_defaults","","Creates a new instance of an application requiring a name, but uses the [`crate_authors!`] and [`crate_version!`] macros to fill in the [`App::author`] and [`App::version`] fields.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they request the help information with `--help` or `-h`.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely neccessary, such as when the binary name for your application is misleading, or perhaps *not* how the user should invoke your program.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed **after** the auto-generated help information. This is often used to describe how to use the arguments, or caveats to be noted.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This information is displayed **before** the auto-generated help information. This is often used for header information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help information.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used when the auto-generated message does not suffice.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"template","","Sets the help template to be used, overriding the default format.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,null],[11,"global_setting","","Enables a single setting that is propogated *down* through all child [`SubCommand`]s.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"global_settings","","Enables multiple settings which are propogated *down* through all child [`SubCommand`]s.",5,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,{"inputs":[{"name":"self"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"max_term_width","","Sets the max terminal width at which to wrap help messages. Using `0` will ignore terminal widths and use source formatting.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to the list of valid possibilties.",5,{"inputs":[{"name":"self"},{"name":"a"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to the list of valid possibilties",5,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string used follows the same rules and syntax as [`Arg::from_usage`]",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See [`Arg::from_usage`] for details on the syntax and rules supported.",5,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as \"hidden\" subcommands that automatically dispatch as if this subcommand was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",5,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with [`App::alias`], except that they are visible inside the help message.",5,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined with [`App::aliases`], except that they are visible inside the help message.",5,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments. By placing them in a logical group, you can build easier requirement and exclusion rules. For instance, you can make an entire [`ArgGroup`] required, meaning that one (and *only* one) argument from that group must be present at runtime.",5,{"inputs":[{"name":"self"},{"name":"arggroup"}],"output":{"name":"self"}}],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilties. Subcommands are effectively sub-[`App`]s, because they can contain their own arguments, subcommands, version, usage, etc. They also function just like [`App`]s, in that they get their own auto generated help, version, and usage.",5,{"inputs":[{"name":"self"},{"name":"app"}],"output":{"name":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilties by iterating over an [`IntoIterator`] of [`SubCommand`]s",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used subcommands, or prioritize those towards the top of the list. Duplicate values **are** allowed. Subcommands with duplicate display orders will be displayed in alphabetical order.",5,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`]",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object",5,{"inputs":[{"name":"self"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"t"}],"output":null}],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can install extra files like a completion script, this may be used e.g. in a command that outputs the contents of the completion script, to be redirected into a file by the user.",5,{"inputs":[{"name":"self"},{"name":"s"},{"name":"shell"},{"name":"w"}],"output":null}],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and the process will exit with the appropriate error code. By default this method gets all user provided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points, which are legal on many platforms.",5,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting the process on failed parse. By default this method gets matches from [`env::args_os`]",5,{"inputs":[{"name":"self"}],"output":{"name":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`] and will automatically exit with an error message. This method, however, lets you specify what iterator to use when performing matches, such as a [`Vec`] of your making.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and [`App::get_matches_safe`]",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not the desired functionality, instead prefer [`App::get_matches_from_safe`] which *does* consume `self`.",5,{"inputs":[{"name":"self"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get information about whether or not the argument was used at runtime, get values, set relationships with other args, etc..",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings for the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"alias","","Allows adding a [`Arg`] alias, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden arguments as one only needs to check for the existence of this command, and not all variants.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"aliases","","Allows adding [`Arg`] aliases, which function as \"hidden\" arguments that automatically dispatch as if this argument was used. This is more efficient, and easier than creating multiple hidden subcommands as one only needs to check for the existence of this command, and not all variants.",6,null],[11,"visible_alias","","Allows adding a [`Arg`] alias that functions exactly like those defined with [`Arg::alias`], except that they are visible inside the help message.",6,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"visible_aliases","","Allows adding multiple [`Arg`] aliases that functions exactly like those defined with [`Arg::aliases`], except that they are visible inside the help message.",6,null],[11,"help","","Sets the help text of the argument that will be displayed to the user when they print the usage/help information.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is required, when no other conflicting rules have been evaluated. Conflicting rules take precedence over being required. **Default:** `false`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"allow_hyphen_values","","Allows values which start with a leading hyphen (`-`)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required_unless","","Sets an arg that override this arg's required setting. (i.e. this arg will be required unless this other argument is present).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"required_unless_all","","Sets args that override this arg's required setting. (i.e. this arg will be required unless all these other arguments are present).",6,null],[11,"required_unless_one","","Sets args that override this arg's [required] setting. (i.e. this arg will be required unless *at least one of* these other arguments are present).",6,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument, the following argument can't be present and vice versa.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per argument.",6,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime **last** \"wins\")",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following argument will override each other in POSIX style (whichever argument was specified at runtime **last** \"wins\")",6,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when using this argument, the following argument *must* be present.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when using this argument, the following arguments *must* be present.",6,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hide_possible_values","","Specifies if the possible values of an argument should be displayed in the help text or not. Defaults to `false` (i.e. show possible values)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","Specifies the index of a positional argument **starting at** 1.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results in the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d` would count as three occurrences. For options there is a distinct difference in multiple occurrences vs multiple values.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at the command line with an explicit `\"\"`, or `''`",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides an argument from help message output.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that only one of the specified values was used, or fails with an error message.",6,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies that only one of the specified values was used, or fails with error message.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"groups","","Specifies the names of multiple [`ArgGroup`]'s the argument belongs to.",6,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a `-f <file>` argument where you wanted exactly 3 'files' you would set `.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided 3 and only 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure which accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a message displayed to the user.",6,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"self"}}],[11,"max_values","","Specifies the *maximum* number of values are for this argument. For example, if you had a `-f <file>` argument where you wanted up to 3 'files' you would set `.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3 values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"min_values","","Specifies the *minimum* number of values for this argument. For example, if you had a `-f <file>` argument where you wanted at least 2 'files' you would set `.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more values.",6,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"self"}}],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a delimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`, and `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the value delimiter for all arguments that accept values (options and positional arguments)",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"require_delimiter","","Specifies that *multiple values* may only be set using the delimiter. This means if an if an option is encountered, and no delimiter is found, it automatically assumed that no additional values for that option follow. This is unlike the default, where it is generally assumed that more values will follow regardless of whether or not a delimiter is used.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used for help and usage strings only. The names are **not** used to access arguments. The values of the arguments are accessed in numeric order (i.e. if you specify two names `one` and `two` `one` will be the first matched value, `two` will be the second).",6,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help documentation. This name is cosmetic only, the name is **not** used to access arguments. This setting can be very helpful when describing the type of input the user should be using, such as `FILE`, `INTERFACE`, etc. Although not required, it's somewhat convention to use all capital letters for the value name.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"default_value","","Specifies the value of the argument when *not* specified at runtime.",6,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and indented once. This can be helpful for arguments with very long or complex help messages. This can also be helpful for arguments with very long flag names, or many/long value names.",6,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be displayed first in the help message. This is helpful when one would like to emphasise frequently used args, or prioritize those towards the top of the list. Duplicate values **are** allowed. Args with duplicate display orders will be displayed in alphabetical order.",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument [`ArgSettings`]: ./enum.ArgSettings.html",6,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"self"}}],[11,"from","","",6,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"argmatches"}}],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes an additional value at runtime). If the option wasn't present at runtime it returns `None`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn't present at runtime it returns `None`. A lossy value is one which contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument value may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument (i.e. an argument that takes multiple values at runtime). If the option wasn't present at runtime it returns `None`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn't present at runtime it returns `None`. A lossy value is one where if it contains invalid UTF-8 code points, those invalid points will be replaced with `\\u{FFFD}`",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a specific argument. If the option wasn't present at runtime it returns `None`. An OS value on Unix-like systems is any series of bytes, regardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid filename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"bool"}}],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn't present it will return `0`.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"u64"}}],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if the subcommand wasn't present at runtime.",7,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"option"}}],[11,"subcommand_name","","Because [`Subcommand`]s are essentially \"sub-[`App`]s\" they have their own [`ArgMatches`] as well.But simply getting the sub-[`ArgMatches`] doesn't help much if we don't also know which subcommand was actually used. This method returns the name of the subcommand that was used at runtime, or `None` if one wasn't.",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`] by returning a tuple with both pieces of information.",7,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"osvalues"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"subcommand"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed to the user when they print version or help and usage information.",10,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to get values from the group or refer to the group inside of conflict and requirement rules.",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to this group by name",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"args","","Adds multiple [arguments] to this group by name",11,null],[11,"multiple","","Allows more than one of the ['Arg']s in this group to be used. (Default: `false`)",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string of the application in the format `<arg|arg2|arg3>`. A required `ArgGroup` simply states that one argument from this group *must* be present at runtime (unless conflicting with another argument).",11,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when any one of the arguments from this group is used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a [required group]. Requirement rules function just like [argument requirement rules], you can name other arguments or groups that must be present when one of the arguments from this group is used.",11,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like [argument exclusion rules], you can name other arguments or groups that must *not* be present when one of the arguments from this group are used.",11,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like [argument exclusion rules], you can name other arguments or groups that must *not* be present when one of the arguments from this group are used.",11,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",11,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"argsettings"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"argsettings"}}],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"errorkind"}}],[11,"eq","","",3,{"inputs":[{"name":"self"},{"name":"errorkind"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,null],[11,"with_description","","Create an error with a custom description.",0,{"inputs":[{"name":"str"},{"name":"errorkind"}],"output":{"name":"self"}}],[11,"description","","",0,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"shell"}}],[11,"variants","","A list of possible variants in `&'static str` form",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Result","","Short hand for [`Result`] type [`Result`]: https://doc.rust-lang.org/std/result/enum.Result.html",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an argument value. This macro returns a `Result<T,String>` which allows you as the developer to decide what you'd like to do on a failed parse. There are two types of errors, parse failures and those where the argument wasn't present (such as a non-required argument). You can use it to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or exiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] This macro returns a [`clap::Result<Vec<T>>`] which allows you as the developer to decide what you'd like to do on a failed parse.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec<T>`] where `T` implements [`std::str::FromStr`] or exiting upon error.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time evaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when parsing arguments. This enum also provides a `variants()` function which can be used to retrieve a `Vec<&'static str>` of the variant names, as well as implementing [`FromStr`] and [`Display`] automatically.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as MAJOR.MINOR.PATCH_PKGVERSION_PRE",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at compile time as \"author1 lastname. <author1@example.com>\",     \"author2 lastname. <author2@example.com>\"",null,null],[14,"clap_app","","Build `App`, `Arg`s, `SubCommand`s and `Group`s with Usage-string like input but without the parsing.",null,null]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sigval","","",null,null],[12,"sival_ptr","","",15,null],[3,"sockaddr","","",null,null],[12,"sa_len","","",16,null],[12,"sa_family","","",16,null],[12,"sa_data","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_len","","",17,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_len","","",18,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[3,"passwd","","",null,null],[12,"pw_name","","",19,null],[12,"pw_passwd","","",19,null],[12,"pw_uid","","",19,null],[12,"pw_gid","","",19,null],[12,"pw_change","","",19,null],[12,"pw_class","","",19,null],[12,"pw_gecos","","",19,null],[12,"pw_dir","","",19,null],[12,"pw_shell","","",19,null],[12,"pw_expire","","",19,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",20,null],[12,"ifa_name","","",20,null],[12,"ifa_flags","","",20,null],[12,"ifa_addr","","",20,null],[12,"ifa_netmask","","",20,null],[12,"ifa_dstaddr","","",20,null],[12,"ifa_data","","",20,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",21,null],[12,"tm_min","","",21,null],[12,"tm_hour","","",21,null],[12,"tm_mday","","",21,null],[12,"tm_mon","","",21,null],[12,"tm_year","","",21,null],[12,"tm_wday","","",21,null],[12,"tm_yday","","",21,null],[12,"tm_isdst","","",21,null],[12,"tm_gmtoff","","",21,null],[12,"tm_zone","","",21,null],[3,"utsname","","",null,null],[12,"sysname","","",22,null],[12,"nodename","","",22,null],[12,"release","","",22,null],[12,"version","","",22,null],[12,"machine","","",22,null],[3,"msghdr","","",null,null],[12,"msg_name","","",23,null],[12,"msg_namelen","","",23,null],[12,"msg_iov","","",23,null],[12,"msg_iovlen","","",23,null],[12,"msg_control","","",23,null],[12,"msg_controllen","","",23,null],[12,"msg_flags","","",23,null],[3,"cmsghdr","","",null,null],[12,"cmsg_len","","",24,null],[12,"cmsg_level","","",24,null],[12,"cmsg_type","","",24,null],[3,"fsid_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",25,null],[12,"if_name","","",25,null],[3,"aiocb","","",null,null],[12,"aio_fildes","","",26,null],[12,"aio_offset","","",26,null],[12,"aio_buf","","",26,null],[12,"aio_nbytes","","",26,null],[12,"aio_reqprio","","",26,null],[12,"aio_sigevent","","",26,null],[12,"aio_lio_opcode","","",26,null],[3,"utmpx","","",null,null],[12,"ut_user","","",27,null],[12,"ut_id","","",27,null],[12,"ut_line","","",27,null],[12,"ut_pid","","",27,null],[12,"ut_type","","",27,null],[12,"ut_tv","","",27,null],[12,"ut_host","","",27,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",28,null],[12,"gl_offs","","",28,null],[12,"gl_pathv","","",28,null],[3,"sockaddr_storage","","",null,null],[12,"ss_len","","",29,null],[12,"ss_family","","",29,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",30,null],[12,"ai_family","","",30,null],[12,"ai_socktype","","",30,null],[12,"ai_protocol","","",30,null],[12,"ai_addrlen","","",30,null],[12,"ai_canonname","","",30,null],[12,"ai_addr","","",30,null],[12,"ai_next","","",30,null],[3,"mach_timebase_info","","",null,null],[12,"numer","","",31,null],[12,"denom","","",31,null],[3,"stat","","",null,null],[12,"st_dev","","",32,null],[12,"st_mode","","",32,null],[12,"st_nlink","","",32,null],[12,"st_ino","","",32,null],[12,"st_uid","","",32,null],[12,"st_gid","","",32,null],[12,"st_rdev","","",32,null],[12,"st_atime","","",32,null],[12,"st_atime_nsec","","",32,null],[12,"st_mtime","","",32,null],[12,"st_mtime_nsec","","",32,null],[12,"st_ctime","","",32,null],[12,"st_ctime_nsec","","",32,null],[12,"st_birthtime","","",32,null],[12,"st_birthtime_nsec","","",32,null],[12,"st_size","","",32,null],[12,"st_blocks","","",32,null],[12,"st_blksize","","",32,null],[12,"st_flags","","",32,null],[12,"st_gen","","",32,null],[12,"st_lspare","","",32,null],[12,"st_qspare","","",32,null],[3,"dirent","","",null,null],[12,"d_ino","","",33,null],[12,"d_seekoff","","",33,null],[12,"d_reclen","","",33,null],[12,"d_namlen","","",33,null],[12,"d_type","","",33,null],[12,"d_name","","",33,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",34,null],[12,"si_errno","","",34,null],[12,"si_code","","",34,null],[12,"si_pid","","",34,null],[12,"si_uid","","",34,null],[12,"si_status","","",34,null],[12,"si_addr","","",34,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",35,null],[12,"sa_mask","","",35,null],[12,"sa_flags","","",35,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",36,null],[12,"ss_size","","",36,null],[12,"ss_flags","","",36,null],[3,"fstore_t","","",null,null],[12,"fst_flags","","",37,null],[12,"fst_posmode","","",37,null],[12,"fst_offset","","",37,null],[12,"fst_length","","",37,null],[12,"fst_bytesalloc","","",37,null],[3,"radvisory","","",null,null],[12,"ra_offset","","",38,null],[12,"ra_count","","",38,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",39,null],[12,"f_frsize","","",39,null],[12,"f_blocks","","",39,null],[12,"f_bfree","","",39,null],[12,"f_bavail","","",39,null],[12,"f_files","","",39,null],[12,"f_ffree","","",39,null],[12,"f_favail","","",39,null],[12,"f_fsid","","",39,null],[12,"f_flag","","",39,null],[12,"f_namemax","","",39,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",40,null],[12,"dli_fbase","","",40,null],[12,"dli_sname","","",40,null],[12,"dli_saddr","","",40,null],[3,"sockaddr_in","","",null,null],[12,"sin_len","","",41,null],[12,"sin_family","","",41,null],[12,"sin_port","","",41,null],[12,"sin_addr","","",41,null],[12,"sin_zero","","",41,null],[3,"statfs","","",null,null],[12,"f_bsize","","",42,null],[12,"f_iosize","","",42,null],[12,"f_blocks","","",42,null],[12,"f_bfree","","",42,null],[12,"f_bavail","","",42,null],[12,"f_files","","",42,null],[12,"f_ffree","","",42,null],[12,"f_fsid","","",42,null],[12,"f_owner","","",42,null],[12,"f_type","","",42,null],[12,"f_flags","","",42,null],[12,"f_fssubtype","","",42,null],[12,"f_fstypename","","",42,null],[12,"f_mntonname","","",42,null],[12,"f_mntfromname","","",42,null],[12,"f_reserved","","",42,null],[3,"kevent","","",null,null],[12,"ident","","",43,null],[12,"filter","","",43,null],[12,"flags","","",43,null],[12,"fflags","","",43,null],[12,"data","","",43,null],[12,"udata","","",43,null],[3,"kevent64_s","","",null,null],[12,"ident","","",44,null],[12,"filter","","",44,null],[12,"flags","","",44,null],[12,"fflags","","",44,null],[12,"data","","",44,null],[12,"udata","","",44,null],[12,"ext","","",44,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",45,null],[12,"dqb_bsoftlimit","","",45,null],[12,"dqb_curbytes","","",45,null],[12,"dqb_ihardlimit","","",45,null],[12,"dqb_isoftlimit","","",45,null],[12,"dqb_curinodes","","",45,null],[12,"dqb_btime","","",45,null],[12,"dqb_itime","","",45,null],[12,"dqb_id","","",45,null],[12,"dqb_spare","","",45,null],[3,"termios","","",null,null],[12,"c_iflag","","",46,null],[12,"c_oflag","","",46,null],[12,"c_cflag","","",46,null],[12,"c_lflag","","",46,null],[12,"c_cc","","",46,null],[12,"c_ispeed","","",46,null],[12,"c_ospeed","","",46,null],[3,"flock","","",null,null],[12,"l_start","","",47,null],[12,"l_len","","",47,null],[12,"l_pid","","",47,null],[12,"l_type","","",47,null],[12,"l_whence","","",47,null],[3,"sf_hdtr","","",null,null],[12,"headers","","",48,null],[12,"hdr_cnt","","",48,null],[12,"trailers","","",48,null],[12,"trl_cnt","","",48,null],[3,"lconv","","",null,null],[12,"decimal_point","","",49,null],[12,"thousands_sep","","",49,null],[12,"grouping","","",49,null],[12,"int_curr_symbol","","",49,null],[12,"currency_symbol","","",49,null],[12,"mon_decimal_point","","",49,null],[12,"mon_thousands_sep","","",49,null],[12,"mon_grouping","","",49,null],[12,"positive_sign","","",49,null],[12,"negative_sign","","",49,null],[12,"int_frac_digits","","",49,null],[12,"frac_digits","","",49,null],[12,"p_cs_precedes","","",49,null],[12,"p_sep_by_space","","",49,null],[12,"n_cs_precedes","","",49,null],[12,"n_sep_by_space","","",49,null],[12,"p_sign_posn","","",49,null],[12,"n_sign_posn","","",49,null],[12,"int_p_cs_precedes","","",49,null],[12,"int_n_cs_precedes","","",49,null],[12,"int_p_sep_by_space","","",49,null],[12,"int_n_sep_by_space","","",49,null],[12,"int_p_sign_posn","","",49,null],[12,"int_n_sign_posn","","",49,null],[3,"sigevent","","",null,null],[12,"sigev_notify","","",50,null],[12,"sigev_signo","","",50,null],[12,"sigev_value","","",50,null],[12,"sigev_notify_attributes","","",50,null],[3,"pthread_attr_t","","",null,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"_WSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFCONTINUED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"getchar_unlocked","","",null,null],[5,"putchar_unlocked","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"fchdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execl","","",null,null],[5,"execle","","",null,null],[5,"execlp","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"tcsetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"time","","",null,null],[5,"localtime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"grantpt","","",null,null],[5,"posix_openpt","","",null,null],[5,"ptsname","","",null,null],[5,"unlockpt","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"setgroups","","",null,null],[5,"ioctl","","",null,null],[5,"kqueue","","",null,null],[5,"unmount","","",null,null],[5,"syscall","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"getpwent","","",null,null],[5,"setpwent","","",null,null],[5,"getprogname","","",null,null],[5,"setprogname","","",null,null],[5,"getloadavg","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"getpeereid","","",null,null],[5,"aio_read","","",null,null],[5,"aio_write","","",null,null],[5,"aio_fsync","","",null,null],[5,"aio_error","","",null,null],[5,"aio_return","","",null,null],[5,"aio_suspend","","",null,null],[5,"aio_cancel","","",null,null],[5,"lio_listio","","",null,null],[5,"lutimes","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"utmpxname","","",null,null],[5,"getnameinfo","","",null,null],[5,"mincore","","",null,null],[5,"sysctlnametomib","","",null,null],[5,"mprotect","","",null,null],[5,"shm_open","","",null,null],[5,"sysctl","","",null,null],[5,"sysctlbyname","","",null,null],[5,"mach_absolute_time","","",null,null],[5,"mach_timebase_info","","",null,null],[5,"pthread_setname_np","","",null,null],[5,"pthread_get_stackaddr_np","","",null,null],[5,"pthread_get_stacksize_np","","",null,null],[5,"__error","","",null,null],[5,"backtrace","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"kevent","","",null,null],[5,"kevent64","","",null,null],[5,"mount","","",null,null],[5,"ptrace","","",null,null],[5,"quotactl","","",null,null],[5,"sethostname","","",null,null],[5,"sendfile","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"localeconv_l","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"querylocale","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"initgroups","","",null,null],[5,"waitid","","",null,null],[11,"clone","","",51,{"inputs":[{"name":"self"}],"output":{"name":"pthread_attr_t"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"aiocb"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"utmpx"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"glob_t"}}],[11,"clone","","",29,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_storage"}}],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"addrinfo"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"mach_timebase_info"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stat"}}],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"dirent"}}],[11,"clone","","",52,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutex_t"}}],[11,"clone","","",53,{"inputs":[{"name":"self"}],"output":{"name":"pthread_mutexattr_t"}}],[11,"clone","","",54,{"inputs":[{"name":"self"}],"output":{"name":"pthread_cond_t"}}],[11,"clone","","",55,{"inputs":[{"name":"self"}],"output":{"name":"pthread_condattr_t"}}],[11,"clone","","",56,{"inputs":[{"name":"self"}],"output":{"name":"pthread_rwlock_t"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"siginfo_t"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"sigaction"}}],[11,"clone","","",36,{"inputs":[{"name":"self"}],"output":{"name":"stack_t"}}],[11,"clone","","",37,{"inputs":[{"name":"self"}],"output":{"name":"fstore_t"}}],[11,"clone","","",38,{"inputs":[{"name":"self"}],"output":{"name":"radvisory"}}],[11,"clone","","",39,{"inputs":[{"name":"self"}],"output":{"name":"statvfs"}}],[11,"clone","","",40,{"inputs":[{"name":"self"}],"output":{"name":"dl_info"}}],[11,"clone","","",41,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in"}}],[11,"clone","","",42,{"inputs":[{"name":"self"}],"output":{"name":"statfs"}}],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"kevent"}}],[11,"clone","","",44,{"inputs":[{"name":"self"}],"output":{"name":"kevent64_s"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"dqblk"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"termios"}}],[11,"clone","","",47,{"inputs":[{"name":"self"}],"output":{"name":"flock"}}],[11,"clone","","",48,{"inputs":[{"name":"self"}],"output":{"name":"sf_hdtr"}}],[11,"clone","","",49,{"inputs":[{"name":"self"}],"output":{"name":"lconv"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"sigevent"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr"}}],[11,"clone","","",17,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_in6"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"sockaddr_un"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"passwd"}}],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"ifaddrs"}}],[11,"clone","","",57,{"inputs":[{"name":"self"}],"output":{"name":"fd_set"}}],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"utsname"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"msghdr"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"cmsghdr"}}],[11,"clone","","",58,{"inputs":[{"name":"self"}],"output":{"name":"fsid_t"}}],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"if_nameindex"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"group"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"utimbuf"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"timeval"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"rlimit"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"rusage"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"in_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"in6_addr"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"hostent"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iovec"}}],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"pollfd"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"winsize"}}],[11,"clone","","",14,{"inputs":[{"name":"self"}],"output":{"name":"linger"}}],[11,"clone","","",15,{"inputs":[{"name":"self"}],"output":{"name":"sigval"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"off_t","","",null,null],[6,"useconds_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"socklen_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_t","","",null,null],[6,"nfds_t","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"ino_t","","",null,null],[6,"mode_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"rlim_t","","",null,null],[6,"mach_timebase_info_data_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"sigset_t","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"nl_item","","",null,null],[6,"id_t","","",null,null],[6,"sem_t","","",null,null],[6,"idtype_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PATH_MAX","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGINFO","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"NCCS","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VMIN","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"IEXTEN","","",null,null],[17,"EXTPROC","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"_UTX_USERSIZE","","",null,null],[17,"_UTX_LINESIZE","","",null,null],[17,"_UTX_IDSIZE","","",null,null],[17,"_UTX_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"SIGNATURE","","",null,null],[17,"SHUTDOWN_TIME","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"CODESET","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"D_MD_ORDER","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"BUFSIZ","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"TMP_MAX","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGEMT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_KILLPAGES","","",null,null],[17,"MS_DEACTIVATE","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EAGAIN","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"EALREADY","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"ENOTSUP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"ELOOP","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"EPROCLIM","","",null,null],[17,"EUSERS","","",null,null],[17,"EDQUOT","","",null,null],[17,"ESTALE","","",null,null],[17,"EREMOTE","","",null,null],[17,"EBADRPC","","",null,null],[17,"ERPCMISMATCH","","",null,null],[17,"EPROGUNAVAIL","","",null,null],[17,"EPROGMISMATCH","","",null,null],[17,"EPROCUNAVAIL","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"EFTYPE","","",null,null],[17,"EAUTH","","",null,null],[17,"ENEEDAUTH","","",null,null],[17,"EPWROFF","","",null,null],[17,"EDEVERR","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"EBADEXEC","","",null,null],[17,"EBADARCH","","",null,null],[17,"ESHLIBVERS","","",null,null],[17,"EBADMACHO","","",null,null],[17,"ECANCELED","","",null,null],[17,"EIDRM","","",null,null],[17,"ENOMSG","","",null,null],[17,"EILSEQ","","",null,null],[17,"ENOATTR","","",null,null],[17,"EBADMSG","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"ENODATA","","",null,null],[17,"ENOLINK","","",null,null],[17,"ENOSR","","",null,null],[17,"ENOSTR","","",null,null],[17,"EPROTO","","",null,null],[17,"ETIME","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"ENOPOLICY","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"EQFULL","","",null,null],[17,"ELAST","","",null,null],[17,"EAI_SYSTEM","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_PREALLOCATE","","",null,null],[17,"F_RDADVISE","","",null,null],[17,"F_RDAHEAD","","",null,null],[17,"F_NOCACHE","","",null,null],[17,"F_GETPATH","","",null,null],[17,"F_FULLFSYNC","","",null,null],[17,"F_FREEZE_FS","","",null,null],[17,"F_THAW_FS","","",null,null],[17,"F_GLOBAL_NOCACHE","","",null,null],[17,"F_NODIRECT","","",null,null],[17,"F_ALLOCATECONTIG","","",null,null],[17,"F_ALLOCATEALL","","",null,null],[17,"F_PEOFPOSMODE","","",null,null],[17,"F_VOLPOSMODE","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"TIOCMODG","","",null,null],[17,"TIOCMODS","","",null,null],[17,"TIOCM_LE","","",null,null],[17,"TIOCM_DTR","","",null,null],[17,"TIOCM_RTS","","",null,null],[17,"TIOCM_ST","","",null,null],[17,"TIOCM_SR","","",null,null],[17,"TIOCM_CTS","","",null,null],[17,"TIOCM_CAR","","",null,null],[17,"TIOCM_CD","","",null,null],[17,"TIOCM_RNG","","",null,null],[17,"TIOCM_RI","","",null,null],[17,"TIOCM_DSR","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCFLUSH","","",null,null],[17,"TIOCGETD","","",null,null],[17,"TIOCSETD","","",null,null],[17,"TIOCIXON","","",null,null],[17,"TIOCIXOFF","","",null,null],[17,"TIOCSBRK","","",null,null],[17,"TIOCCBRK","","",null,null],[17,"TIOCSDTR","","",null,null],[17,"TIOCCDTR","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCNOTTY","","",null,null],[17,"TIOCPKT","","",null,null],[17,"TIOCPKT_DATA","","",null,null],[17,"TIOCPKT_FLUSHREAD","","",null,null],[17,"TIOCPKT_FLUSHWRITE","","",null,null],[17,"TIOCPKT_STOP","","",null,null],[17,"TIOCPKT_START","","",null,null],[17,"TIOCPKT_NOSTOP","","",null,null],[17,"TIOCPKT_DOSTOP","","",null,null],[17,"TIOCPKT_IOCTL","","",null,null],[17,"TIOCSTOP","","",null,null],[17,"TIOCSTART","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCREMOTE","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCUCNTL","","",null,null],[17,"TIOCSTAT","","",null,null],[17,"TIOCSCONS","","",null,null],[17,"TIOCCONS","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCEXT","","",null,null],[17,"TIOCSIG","","",null,null],[17,"TIOCDRAIN","","",null,null],[17,"TIOCMSDTRWAIT","","",null,null],[17,"TIOCMGDTRWAIT","","",null,null],[17,"TIOCSDRAINWAIT","","",null,null],[17,"TIOCGDRAINWAIT","","",null,null],[17,"TIOCDSIMICROCODE","","",null,null],[17,"TIOCPTYGRANT","","",null,null],[17,"TIOCPTYGNAME","","",null,null],[17,"TIOCPTYUNLK","","",null,null],[17,"SIGTRAP","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PROCESS_SHARED","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIM_NLIMITS","","",null,null],[17,"_RLIMIT_POSIX_FLAG","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_FREE","","",null,null],[17,"MADV_ZERO_WIRED_PAGES","","",null,null],[17,"MADV_FREE_REUSABLE","","",null,null],[17,"MADV_FREE_REUSE","","",null,null],[17,"MADV_CAN_REUSE","","",null,null],[17,"MINCORE_INCORE","","",null,null],[17,"MINCORE_REFERENCED","","",null,null],[17,"MINCORE_MODIFIED","","",null,null],[17,"MINCORE_REFERENCED_OTHER","","",null,null],[17,"MINCORE_MODIFIED_OTHER","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IPV6_JOIN_GROUP","","",null,null],[17,"IPV6_LEAVE_GROUP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_KEEPALIVE","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_USELOOPBACK","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"MSG_PEEK","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"MAP_COPY","","",null,null],[17,"MAP_RENAME","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_NOEXTEND","","",null,null],[17,"MAP_HASSEMAPHORE","","",null,null],[17,"MAP_NOCACHE","","",null,null],[17,"MAP_JIT","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"SO_NREAD","","",null,null],[17,"SO_NKE","","",null,null],[17,"SO_NOSIGPIPE","","",null,null],[17,"SO_NOADDRERR","","",null,null],[17,"SO_NWRITE","","",null,null],[17,"SO_DONTTRUNC","","",null,null],[17,"SO_WANTMORE","","",null,null],[17,"SO_WANTOOBFLAG","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_NPROCESSORS_CONF","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_2_PBS","","",null,null],[17,"_SC_2_PBS_ACCOUNTING","","",null,null],[17,"_SC_2_PBS_CHECKPOINT","","",null,null],[17,"_SC_2_PBS_LOCATE","","",null,null],[17,"_SC_2_PBS_MESSAGE","","",null,null],[17,"_SC_2_PBS_TRACK","","",null,null],[17,"_SC_ADVISORY_INFO","","",null,null],[17,"_SC_BARRIERS","","",null,null],[17,"_SC_CLOCK_SELECTION","","",null,null],[17,"_SC_CPUTIME","","",null,null],[17,"_SC_FILE_LOCKING","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"_SC_MONOTONIC_CLOCK","","",null,null],[17,"_SC_READER_WRITER_LOCKS","","",null,null],[17,"_SC_REGEXP","","",null,null],[17,"_SC_SHELL","","",null,null],[17,"_SC_SPAWN","","",null,null],[17,"_SC_SPIN_LOCKS","","",null,null],[17,"_SC_SPORADIC_SERVER","","",null,null],[17,"_SC_THREAD_CPUTIME","","",null,null],[17,"_SC_THREAD_SPORADIC_SERVER","","",null,null],[17,"_SC_TIMEOUTS","","",null,null],[17,"_SC_TRACE","","",null,null],[17,"_SC_TRACE_EVENT_FILTER","","",null,null],[17,"_SC_TRACE_INHERIT","","",null,null],[17,"_SC_TRACE_LOG","","",null,null],[17,"_SC_TYPED_MEMORY_OBJECTS","","",null,null],[17,"_SC_V6_ILP32_OFF32","","",null,null],[17,"_SC_V6_ILP32_OFFBIG","","",null,null],[17,"_SC_V6_LP64_OFF64","","",null,null],[17,"_SC_V6_LPBIG_OFFBIG","","",null,null],[17,"_SC_IPV6","","",null,null],[17,"_SC_RAW_SOCKETS","","",null,null],[17,"_SC_SYMLOOP_MAX","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_XOPEN_STREAMS","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LP64_OFF64","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_SS_REPL_MAX","","",null,null],[17,"_SC_TRACE_EVENT_NAME_MAX","","",null,null],[17,"_SC_TRACE_NAME_MAX","","",null,null],[17,"_SC_TRACE_SYS_MAX","","",null,null],[17,"_SC_TRACE_USER_EVENT_MAX","","",null,null],[17,"_SC_PASS_MAX","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"_PTHREAD_MUTEX_SIG_init","","",null,null],[17,"_PTHREAD_COND_SIG_init","","",null,null],[17,"_PTHREAD_RWLOCK_SIG_init","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"EVFILT_READ","","",null,null],[17,"EVFILT_WRITE","","",null,null],[17,"EVFILT_AIO","","",null,null],[17,"EVFILT_VNODE","","",null,null],[17,"EVFILT_PROC","","",null,null],[17,"EVFILT_SIGNAL","","",null,null],[17,"EVFILT_TIMER","","",null,null],[17,"EVFILT_MACHPORT","","",null,null],[17,"EVFILT_FS","","",null,null],[17,"EVFILT_USER","","",null,null],[17,"EVFILT_VM","","",null,null],[17,"EV_ADD","","",null,null],[17,"EV_DELETE","","",null,null],[17,"EV_ENABLE","","",null,null],[17,"EV_DISABLE","","",null,null],[17,"EV_ONESHOT","","",null,null],[17,"EV_CLEAR","","",null,null],[17,"EV_RECEIPT","","",null,null],[17,"EV_DISPATCH","","",null,null],[17,"EV_FLAG0","","",null,null],[17,"EV_POLL","","",null,null],[17,"EV_FLAG1","","",null,null],[17,"EV_OOBAND","","",null,null],[17,"EV_ERROR","","",null,null],[17,"EV_EOF","","",null,null],[17,"EV_SYSFLAGS","","",null,null],[17,"NOTE_TRIGGER","","",null,null],[17,"NOTE_FFNOP","","",null,null],[17,"NOTE_FFAND","","",null,null],[17,"NOTE_FFOR","","",null,null],[17,"NOTE_FFCOPY","","",null,null],[17,"NOTE_FFCTRLMASK","","",null,null],[17,"NOTE_FFLAGSMASK","","",null,null],[17,"NOTE_LOWAT","","",null,null],[17,"NOTE_DELETE","","",null,null],[17,"NOTE_WRITE","","",null,null],[17,"NOTE_EXTEND","","",null,null],[17,"NOTE_ATTRIB","","",null,null],[17,"NOTE_LINK","","",null,null],[17,"NOTE_RENAME","","",null,null],[17,"NOTE_REVOKE","","",null,null],[17,"NOTE_NONE","","",null,null],[17,"NOTE_EXIT","","",null,null],[17,"NOTE_FORK","","",null,null],[17,"NOTE_EXEC","","",null,null],[17,"NOTE_REAP","","",null,null],[17,"NOTE_SIGNAL","","",null,null],[17,"NOTE_EXITSTATUS","","",null,null],[17,"NOTE_EXIT_DETAIL","","",null,null],[17,"NOTE_PDATAMASK","","",null,null],[17,"NOTE_PCTRLMASK","","",null,null],[17,"NOTE_EXIT_REPARENTED","","",null,null],[17,"NOTE_EXIT_DETAIL_MASK","","",null,null],[17,"NOTE_EXIT_DECRYPTFAIL","","",null,null],[17,"NOTE_EXIT_MEMORY","","",null,null],[17,"NOTE_EXIT_CSERROR","","",null,null],[17,"NOTE_VM_PRESSURE","","",null,null],[17,"NOTE_VM_PRESSURE_TERMINATE","","",null,null],[17,"NOTE_VM_PRESSURE_SUDDEN_TERMINATE","","",null,null],[17,"NOTE_VM_ERROR","","",null,null],[17,"NOTE_SECONDS","","",null,null],[17,"NOTE_USECONDS","","",null,null],[17,"NOTE_NSECONDS","","",null,null],[17,"NOTE_ABSOLUTE","","",null,null],[17,"NOTE_LEEWAY","","",null,null],[17,"NOTE_CRITICAL","","",null,null],[17,"NOTE_BACKGROUND","","",null,null],[17,"NOTE_TRACK","","",null,null],[17,"NOTE_TRACKERR","","",null,null],[17,"NOTE_CHILD","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"TAB3","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"IUTF8","","",null,null],[17,"CRTSCTS","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"RTLD_FIRST","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"_WSTOPPED","","",null,null],[17,"LOG_NETINFO","","",null,null],[17,"LOG_REMOTEAUTH","","",null,null],[17,"LOG_INSTALL","","",null,null],[17,"LOG_RAS","","",null,null],[17,"LOG_LAUNCHD","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"CTLTYPE","","",null,null],[17,"CTLTYPE_NODE","","",null,null],[17,"CTLTYPE_INT","","",null,null],[17,"CTLTYPE_STRING","","",null,null],[17,"CTLTYPE_QUAD","","",null,null],[17,"CTLTYPE_OPAQUE","","",null,null],[17,"CTLTYPE_STRUCT","","",null,null],[17,"CTLFLAG_RD","","",null,null],[17,"CTLFLAG_WR","","",null,null],[17,"CTLFLAG_RW","","",null,null],[17,"CTLFLAG_NOLOCK","","",null,null],[17,"CTLFLAG_ANYBODY","","",null,null],[17,"CTLFLAG_SECURE","","",null,null],[17,"CTLFLAG_MASKED","","",null,null],[17,"CTLFLAG_NOAUTO","","",null,null],[17,"CTLFLAG_KERN","","",null,null],[17,"CTLFLAG_LOCKED","","",null,null],[17,"CTLFLAG_OID2","","",null,null],[17,"CTL_UNSPEC","","",null,null],[17,"CTL_KERN","","",null,null],[17,"CTL_VM","","",null,null],[17,"CTL_VFS","","",null,null],[17,"CTL_NET","","",null,null],[17,"CTL_DEBUG","","",null,null],[17,"CTL_HW","","",null,null],[17,"CTL_MACHDEP","","",null,null],[17,"CTL_USER","","",null,null],[17,"CTL_MAXID","","",null,null],[17,"KERN_OSTYPE","","",null,null],[17,"KERN_OSRELEASE","","",null,null],[17,"KERN_OSREV","","",null,null],[17,"KERN_VERSION","","",null,null],[17,"KERN_MAXVNODES","","",null,null],[17,"KERN_MAXPROC","","",null,null],[17,"KERN_MAXFILES","","",null,null],[17,"KERN_ARGMAX","","",null,null],[17,"KERN_SECURELVL","","",null,null],[17,"KERN_HOSTNAME","","",null,null],[17,"KERN_HOSTID","","",null,null],[17,"KERN_CLOCKRATE","","",null,null],[17,"KERN_VNODE","","",null,null],[17,"KERN_PROC","","",null,null],[17,"KERN_FILE","","",null,null],[17,"KERN_PROF","","",null,null],[17,"KERN_POSIX1","","",null,null],[17,"KERN_NGROUPS","","",null,null],[17,"KERN_JOB_CONTROL","","",null,null],[17,"KERN_SAVED_IDS","","",null,null],[17,"KERN_BOOTTIME","","",null,null],[17,"KERN_NISDOMAINNAME","","",null,null],[17,"KERN_DOMAINNAME","","",null,null],[17,"KERN_MAXPARTITIONS","","",null,null],[17,"KERN_KDEBUG","","",null,null],[17,"KERN_UPDATEINTERVAL","","",null,null],[17,"KERN_OSRELDATE","","",null,null],[17,"KERN_NTP_PLL","","",null,null],[17,"KERN_BOOTFILE","","",null,null],[17,"KERN_MAXFILESPERPROC","","",null,null],[17,"KERN_MAXPROCPERUID","","",null,null],[17,"KERN_DUMPDEV","","",null,null],[17,"KERN_IPC","","",null,null],[17,"KERN_DUMMY","","",null,null],[17,"KERN_PS_STRINGS","","",null,null],[17,"KERN_USRSTACK32","","",null,null],[17,"KERN_LOGSIGEXIT","","",null,null],[17,"KERN_SYMFILE","","",null,null],[17,"KERN_PROCARGS","","",null,null],[17,"KERN_NETBOOT","","",null,null],[17,"KERN_SYSV","","",null,null],[17,"KERN_AFFINITY","","",null,null],[17,"KERN_TRANSLATE","","",null,null],[17,"KERN_CLASSIC","","",null,null],[17,"KERN_EXEC","","",null,null],[17,"KERN_CLASSICHANDLER","","",null,null],[17,"KERN_AIOMAX","","",null,null],[17,"KERN_AIOPROCMAX","","",null,null],[17,"KERN_AIOTHREADS","","",null,null],[17,"KERN_COREFILE","","",null,null],[17,"KERN_COREDUMP","","",null,null],[17,"KERN_SUGID_COREDUMP","","",null,null],[17,"KERN_PROCDELAYTERM","","",null,null],[17,"KERN_SHREG_PRIVATIZABLE","","",null,null],[17,"KERN_LOW_PRI_WINDOW","","",null,null],[17,"KERN_LOW_PRI_DELAY","","",null,null],[17,"KERN_POSIX","","",null,null],[17,"KERN_USRSTACK64","","",null,null],[17,"KERN_NX_PROTECTION","","",null,null],[17,"KERN_TFP","","",null,null],[17,"KERN_PROCNAME","","",null,null],[17,"KERN_THALTSTACK","","",null,null],[17,"KERN_SPECULATIVE_READS","","",null,null],[17,"KERN_OSVERSION","","",null,null],[17,"KERN_SAFEBOOT","","",null,null],[17,"KERN_RAGEVNODE","","",null,null],[17,"KERN_TTY","","",null,null],[17,"KERN_CHECKOPENEVT","","",null,null],[17,"KERN_THREADNAME","","",null,null],[17,"KERN_MAXID","","",null,null],[17,"KERN_RAGE_PROC","","",null,null],[17,"KERN_RAGE_THREAD","","",null,null],[17,"KERN_UNRAGE_PROC","","",null,null],[17,"KERN_UNRAGE_THREAD","","",null,null],[17,"KERN_OPENEVT_PROC","","",null,null],[17,"KERN_UNOPENEVT_PROC","","",null,null],[17,"KERN_TFP_POLICY","","",null,null],[17,"KERN_TFP_POLICY_DENY","","",null,null],[17,"KERN_TFP_POLICY_DEFAULT","","",null,null],[17,"KERN_KDEFLAGS","","",null,null],[17,"KERN_KDDFLAGS","","",null,null],[17,"KERN_KDENABLE","","",null,null],[17,"KERN_KDSETBUF","","",null,null],[17,"KERN_KDGETBUF","","",null,null],[17,"KERN_KDSETUP","","",null,null],[17,"KERN_KDREMOVE","","",null,null],[17,"KERN_KDSETREG","","",null,null],[17,"KERN_KDGETREG","","",null,null],[17,"KERN_KDREADTR","","",null,null],[17,"KERN_KDPIDTR","","",null,null],[17,"KERN_KDTHRMAP","","",null,null],[17,"KERN_KDPIDEX","","",null,null],[17,"KERN_KDSETRTCDEC","","",null,null],[17,"KERN_KDGETENTROPY","","",null,null],[17,"KERN_KDWRITETR","","",null,null],[17,"KERN_KDWRITEMAP","","",null,null],[17,"KERN_KDENABLE_BG_TRACE","","",null,null],[17,"KERN_KDDISABLE_BG_TRACE","","",null,null],[17,"KERN_KDREADCURTHRMAP","","",null,null],[17,"KERN_KDSET_TYPEFILTER","","",null,null],[17,"KERN_KDBUFWAIT","","",null,null],[17,"KERN_KDCPUMAP","","",null,null],[17,"KERN_PROC_ALL","","",null,null],[17,"KERN_PROC_PID","","",null,null],[17,"KERN_PROC_PGRP","","",null,null],[17,"KERN_PROC_SESSION","","",null,null],[17,"KERN_PROC_TTY","","",null,null],[17,"KERN_PROC_UID","","",null,null],[17,"KERN_PROC_RUID","","",null,null],[17,"KERN_PROC_LCID","","",null,null],[17,"KIPC_MAXSOCKBUF","","",null,null],[17,"KIPC_SOCKBUF_WASTE","","",null,null],[17,"KIPC_SOMAXCONN","","",null,null],[17,"KIPC_MAX_LINKHDR","","",null,null],[17,"KIPC_MAX_PROTOHDR","","",null,null],[17,"KIPC_MAX_HDR","","",null,null],[17,"KIPC_MAX_DATALEN","","",null,null],[17,"KIPC_MBSTAT","","",null,null],[17,"KIPC_NMBCLUSTERS","","",null,null],[17,"KIPC_SOQLIMITCOMPAT","","",null,null],[17,"VM_METER","","",null,null],[17,"VM_LOADAVG","","",null,null],[17,"VM_MACHFACTOR","","",null,null],[17,"VM_SWAPUSAGE","","",null,null],[17,"VM_MAXID","","",null,null],[17,"HW_MACHINE","","",null,null],[17,"HW_MODEL","","",null,null],[17,"HW_NCPU","","",null,null],[17,"HW_BYTEORDER","","",null,null],[17,"HW_PHYSMEM","","",null,null],[17,"HW_USERMEM","","",null,null],[17,"HW_PAGESIZE","","",null,null],[17,"HW_DISKNAMES","","",null,null],[17,"HW_DISKSTATS","","",null,null],[17,"HW_EPOCH","","",null,null],[17,"HW_FLOATINGPT","","",null,null],[17,"HW_MACHINE_ARCH","","",null,null],[17,"HW_VECTORUNIT","","",null,null],[17,"HW_BUS_FREQ","","",null,null],[17,"HW_CPU_FREQ","","",null,null],[17,"HW_CACHELINE","","",null,null],[17,"HW_L1ICACHESIZE","","",null,null],[17,"HW_L1DCACHESIZE","","",null,null],[17,"HW_L2SETTINGS","","",null,null],[17,"HW_L2CACHESIZE","","",null,null],[17,"HW_L3SETTINGS","","",null,null],[17,"HW_L3CACHESIZE","","",null,null],[17,"HW_TB_FREQ","","",null,null],[17,"HW_MEMSIZE","","",null,null],[17,"HW_AVAILCPU","","",null,null],[17,"HW_MAXID","","",null,null],[17,"USER_CS_PATH","","",null,null],[17,"USER_BC_BASE_MAX","","",null,null],[17,"USER_BC_DIM_MAX","","",null,null],[17,"USER_BC_SCALE_MAX","","",null,null],[17,"USER_BC_STRING_MAX","","",null,null],[17,"USER_COLL_WEIGHTS_MAX","","",null,null],[17,"USER_EXPR_NEST_MAX","","",null,null],[17,"USER_LINE_MAX","","",null,null],[17,"USER_RE_DUP_MAX","","",null,null],[17,"USER_POSIX2_VERSION","","",null,null],[17,"USER_POSIX2_C_BIND","","",null,null],[17,"USER_POSIX2_C_DEV","","",null,null],[17,"USER_POSIX2_CHAR_TERM","","",null,null],[17,"USER_POSIX2_FORT_DEV","","",null,null],[17,"USER_POSIX2_FORT_RUN","","",null,null],[17,"USER_POSIX2_LOCALEDEF","","",null,null],[17,"USER_POSIX2_SW_DEV","","",null,null],[17,"USER_POSIX2_UPE","","",null,null],[17,"USER_STREAM_MAX","","",null,null],[17,"USER_TZNAME_MAX","","",null,null],[17,"USER_MAXID","","",null,null],[17,"CTL_DEBUG_NAME","","",null,null],[17,"CTL_DEBUG_VALUE","","",null,null],[17,"CTL_DEBUG_MAXID","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"PRIO_DARWIN_THREAD","","",null,null],[17,"PRIO_DARWIN_PROCESS","","",null,null],[17,"PRIO_DARWIN_BG","","",null,null],[17,"PRIO_DARWIN_NONUI","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"SIGEV_NONE","","",null,null],[17,"SIGEV_SIGNAL","","",null,null],[17,"SIGEV_THREAD","","",null,null],[17,"AIO_CANCELED","","",null,null],[17,"AIO_NOTCANCELED","","",null,null],[17,"AIO_ALLDONE","","",null,null],[17,"AIO_LISTIO_MAX","","",null,null],[17,"LIO_NOP","","",null,null],[17,"LIO_WRITE","","",null,null],[17,"LIO_READ","","",null,null],[17,"LIO_WAIT","","",null,null],[17,"LIO_NOWAIT","","",null,null],[17,"WEXITED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"P_ALL","","",null,null],[17,"P_PID","","",null,null],[17,"P_PGID","","",null,null],[17,"__PTHREAD_MUTEX_SIZE__","","",null,null],[17,"__PTHREAD_COND_SIZE__","","",null,null],[17,"__PTHREAD_CONDATTR_SIZE__","","",null,null],[17,"__PTHREAD_RWLOCK_SIZE__","","",null,null],[17,"TIOCTIMESTAMP","","",null,null],[17,"TIOCDCDTIMESTAMP","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sigval"],[3,"sockaddr"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"passwd"],[3,"ifaddrs"],[3,"tm"],[3,"utsname"],[3,"msghdr"],[3,"cmsghdr"],[3,"if_nameindex"],[3,"aiocb"],[3,"utmpx"],[3,"glob_t"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"mach_timebase_info"],[3,"stat"],[3,"dirent"],[3,"siginfo_t"],[3,"sigaction"],[3,"stack_t"],[3,"fstore_t"],[3,"radvisory"],[3,"statvfs"],[3,"Dl_info"],[3,"sockaddr_in"],[3,"statfs"],[3,"kevent"],[3,"kevent64_s"],[3,"dqblk"],[3,"termios"],[3,"flock"],[3,"sf_hdtr"],[3,"lconv"],[3,"sigevent"],[3,"pthread_attr_t"],[3,"pthread_mutex_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"pthread_rwlock_t"],[3,"fd_set"],[3,"fsid_t"]]};
searchIndex["pat"] = {"doc":"","items":[[8,"AsPattern","pat","",null,null],[10,"pat","","",0,{"inputs":[{"name":"self"}],"output":{"name":"t"}}]],"paths":[[8,"AsPattern"]]};
searchIndex["pmfp_collections"] = {"doc":"","items":[[0,"zip","pmfp_collections","",null,null],[3,"Stacks","pmfp_collections::zip","",null,null],[4,"Dir","","",null,null],[13,"L","","",0,null],[13,"R","","",0,null],[4,"Cmd","","",null,null],[13,"Zip","","",1,null],[13,"Push","","",1,null],[13,"Edit","","",1,null],[13,"Pull","","",1,null],[8,"Zip","","",null,null],[10,"peek_l","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"peek_r","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"push_l","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[10,"push_r","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[10,"pull_l","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[10,"pull_r","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zip_l","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zip_r","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"edit_l","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"edit_r","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop_l","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pop_r","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zip","","",2,{"inputs":[{"name":"self"},{"name":"dir"}],"output":{"name":"result"}}],[11,"peek","","",2,{"inputs":[{"name":"self"},{"name":"dir"}],"output":{"name":"result"}}],[11,"push","","",2,{"inputs":[{"name":"self"},{"name":"dir"},{"name":"t"}],"output":{"name":"self"}}],[11,"pull","","",2,{"inputs":[{"name":"self"},{"name":"dir"}],"output":{"name":"result"}}],[11,"edit","","",2,{"inputs":[{"name":"self"},{"name":"dir"},{"name":"t"}],"output":{"name":"result"}}],[11,"pop","","",2,{"inputs":[{"name":"self"},{"name":"dir"}],"output":{"name":"result"}}],[11,"do_cmd","","",2,{"inputs":[{"name":"self"},{"name":"cmd"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"dir"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"dir"}}],[11,"rev","","",0,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"cmd"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"cmd"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"cmd"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stacks"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"stacks"}}],[11,"at_left","","",3,{"inputs":[{"name":"stack"}],"output":{"name":"stacks"}}],[11,"at_right","","",3,{"inputs":[{"name":"stack"}],"output":{"name":"stacks"}}],[11,"between","","",3,{"inputs":[{"name":"stack"},{"name":"stack"}],"output":{"name":"stacks"}}],[11,"left_stack","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"right_stack","","",3,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"peek_l","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek_r","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"push_l","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"push_r","","",3,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"pull_l","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pull_r","","",3,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[0,"stack","pmfp_collections","",null,null],[3,"Stack","pmfp_collections::stack","",null,null],[3,"Iter","","",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",4,{"inputs":[],"output":{"name":"self"}}],[11,"is_empty","","",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"push","","",4,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"stack"}}],[11,"peek","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pull","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"iter","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"rev","","",4,{"inputs":[{"name":"self"}],"output":{"name":"stack"}}],[11,"drop","","",4,{"inputs":[{"name":"self"}],"output":null}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[0,"seqzip","pmfp_collections","",null,null],[3,"AtLeft","pmfp_collections::seqzip","",null,null],[12,"0","","",6,null],[3,"AtRight","","",null,null],[12,"0","","",7,null],[8,"Seq","","",null,null],[10,"zip_to","","",8,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[8,"SeqZip","","",null,null],[10,"unzip","","",9,{"inputs":[{"name":"self"}],"output":{"name":"s"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"atleft"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"atright"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"deref","","",6,null],[11,"deref","","",7,null],[11,"zip_to","","",6,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"zip_to","","",7,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"unzip","pmfp_collections::zip","",3,{"inputs":[{"name":"self"}],"output":{"name":"atleft"}}],[11,"unzip","","",3,{"inputs":[{"name":"self"}],"output":{"name":"atright"}}],[0,"persist_raz","pmfp_collections","",null,null],[3,"RazSeq","pmfp_collections::persist_raz","",null,null],[3,"Raz","","",null,null],[3,"Iter","","",null,null],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"razseq"}}],[11,"iter","","",10,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"new","","",11,{"inputs":[],"output":{"name":"raz"}}],[11,"empty","","",11,{"inputs":[{"name":"usize"}],"output":{"name":"raz"}}],[11,"iter_r","","",11,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",12,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"peek_l","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek_r","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"push_l","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"push_r","","",11,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"self"}}],[11,"pull_l","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pull_r","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zip_l","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zip_r","","",11,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zip_to","","",10,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"unzip","","",11,{"inputs":[{"name":"self"}],"output":{"name":"razseq"}}],[0,"trees","pmfp_collections","Traits for various flavors of persistent trees",null,null],[3,"NegBin","pmfp_collections::trees","Wrapper around u8 to generate random `Level`s appropriate for a balanced binary tree. ",null,null],[12,"0","","",13,null],[8,"BinTree","","General trait for a persistent binary tree",null,null],[11,"bin_make","","construct a new tree with existing nodes",14,{"inputs":[{"name":"t"},{"name":"option"},{"name":"option"}],"output":{"name":"self"}}],[10,"l_tree","","get the left branch",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"r_tree","","get the right branch",14,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"peek","","get a reference to the data in this branch",14,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[10,"fold_up","","Perform a calculation recursively over all branches.",14,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[8,"Level","","Levels for the LevelTree",null,null],[10,"l_max","","construct greatest `Level`",15,{"inputs":[],"output":{"name":"self"}}],[10,"l_min","","construct least `Level`",15,{"inputs":[],"output":{"name":"self"}}],[10,"l_inc","","access the next greater `Level`",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"l_dec","","access the next lesser `Level`",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[8,"LevelTree","","A binary tree with \"levels\" for each node",null,null],[11,"lev_make","","construct a new tree",16,{"inputs":[{"name":"l"},{"name":"t"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[10,"level","","get the level of this node",16,{"inputs":[{"name":"self"}],"output":{"name":"l"}}],[8,"NominalTree","","A binary tree with incremental, named links",null,null],[11,"nm_make","","construct a new tree",17,{"inputs":[{"name":"option"},{"name":"l"},{"name":"t"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[10,"name","","get the incremental name from this node, if there is one",17,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"data","","get owned copy of data",17,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"eq","","",13,{"inputs":[{"name":"self"},{"name":"negbin"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"self"},{"name":"negbin"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"self"},{"name":"negbin"}],"output":{"name":"option"}}],[11,"lt","","",13,{"inputs":[{"name":"self"},{"name":"negbin"}],"output":{"name":"bool"}}],[11,"le","","",13,{"inputs":[{"name":"self"},{"name":"negbin"}],"output":{"name":"bool"}}],[11,"gt","","",13,{"inputs":[{"name":"self"},{"name":"negbin"}],"output":{"name":"bool"}}],[11,"ge","","",13,{"inputs":[{"name":"self"},{"name":"negbin"}],"output":{"name":"bool"}}],[11,"cmp","","",13,{"inputs":[{"name":"self"},{"name":"negbin"}],"output":{"name":"ordering"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"negbin"}}],[11,"fmt","","",13,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","Generates Levels 1-64 from a negative binomial distribution. This is appropriate for binary trees of up to at least 2^64 elements. ",13,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[11,"l_max","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"l_min","","",13,{"inputs":[],"output":{"name":"self"}}],[11,"l_inc","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"l_dec","","",13,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"level_tree","pmfp_collections","a persistent, cannonical tree that keeps track of the \"level\" of each of its branches.",null,null],[3,"Tree","pmfp_collections::level_tree","A persistent tree with stable, internally defined structure",null,null],[5,"good_levels","","Use good_levels to verify level consistancy when debugging",null,{"inputs":[{"name":"tree"}],"output":{"name":"bool"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"self"},{"name":"tree"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"self"},{"name":"tree"}],"output":{"name":"bool"}}],[11,"new","","build a new tree from components, return None if levels are inconsistent",18,{"inputs":[{"name":"l"},{"name":"e"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lev_make","","",18,{"inputs":[{"name":"l"},{"name":"e"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"level","","peek at the level of the root of this tree",18,{"inputs":[{"name":"self"}],"output":{"name":"l"}}],[11,"l_tree","","obtain the left subtree if it exists",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"r_tree","","obtain the right subtree if it exists",18,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek","","peek at the data contained at the top node of the tree",18,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"fold_up","","",18,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"deref","","",18,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"tree_cursor","pmfp_collections","Tree Cursor for `level_tree`",null,null],[3,"Cursor","pmfp_collections::tree_cursor","tree cursor, centered on a node of the underlying persistent tree",null,null],[4,"Force","","cursor movement qualifier",null,null],[13,"No","","",19,null],[13,"Yes","","",19,null],[13,"Discard","","",19,null],[8,"TreeUpdate","","Used for updating data when the tree is mutated",null,null],[10,"update","","This method provides references to the (potentially) newly defined left and right branches of a tree node, along with the old data in that node. For example, read size from left and right to get the new size of the branch, or copy the old data without modification for the new branch.",20,{"inputs":[{"name":"option"},{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[8,"DeriveTreeUpdate","","marker that allows a default implementation of TreeUpdate if the data is also `Clone`",null,null],[11,"clone","","",21,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"force"}}],[11,"eq","","",19,{"inputs":[{"name":"self"},{"name":"force"}],"output":{"name":"bool"}}],[11,"from","","",21,{"inputs":[{"name":"tree"}],"output":{"name":"self"}}],[11,"new","","creates a new cursor, to an empty underlying tree",21,{"inputs":[],"output":{"name":"self"}}],[11,"with_depth","","creates a new cursor, with expected depth of underlying tree",21,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"split","","Returns the node the cursor is focused on as a tree, plus two cursors containing every node to the left and right, focused on at the two branches of the returned tree",21,null],[11,"join","","makes a new cursor at the given data, between the trees of the other cursors",21,{"inputs":[{"name":"self"},{"name":"l"},{"name":"e"},{"name":"self"}],"output":{"name":"self"}}],[11,"at_tree","","copies the focused node as a tree",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"left_tree","","copies the left branch of the focused node",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right_tree","","copies the right branch of the focused node",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek","","peek at the data of the focused tree node",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_level","","peek at the level of the focused tree node",21,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"down_left_force","","move the cursor into the left branch, returning true if successful use the `Force` enum to determine the type of movement",21,{"inputs":[{"name":"self"},{"name":"force"}],"output":{"name":"bool"}}],[11,"down_left","","move the cursor to the left branch, without entering an empty branch",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"down_right_force","","move the cursor into the right branch, returning true if successful use the `Force` enum to determine the type of movement",21,{"inputs":[{"name":"self"},{"name":"force"}],"output":{"name":"bool"}}],[11,"down_right","","move the cursor to the right branch, without entering an empty branch",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"up","","move the cursor up towards the root of the underlying persistent tree",21,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"archive_stack","pmfp_collections","High-gauge Stack",null,null],[3,"AStack","pmfp_collections::archive_stack","Archive Stack",null,null],[11,"new","","new `AStack` with a new vector as current stack",22,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","new `AStack` with a new pre-allocated vector as current stack",22,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"is_empty","","whether or not the `AStack` has any data, including archived data",22,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","the total item count of the `AStack`, including archived data",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"active_len","","the item count of the \"fast\" mutable vector outside of the archive",22,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"push","","push a element to the \"fast\" vector outside of the archive",22,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"pop","","remove and return the element at the top of the stack, even if it is within the archive. ",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_archive","","Exposes the last data archived, returning the prior active vector and the metadata stored with the archive",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"active_data","","peeks at the entire active vector",22,{"inputs":[{"name":"self"}],"output":{"name":"vec"}}],[11,"peek","","peeks at the element at the top of the stack, even if it is within the archive.",22,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"archive","","push the entire active vector into the archive, along with associated metadata return false if the active vector was empty. In this case, no archive will happen and the metadata will be unused",22,{"inputs":[{"name":"self"},{"name":"m"}],"output":{"name":"bool"}}],[11,"archive_with_capacity","","push the entire active vector into the archive, providing a capacity for the new active vector",22,{"inputs":[{"name":"self"},{"name":"m"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"from","","",22,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"clone","","",22,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"gauged_raz","pmfp_collections","Gauged RAZ - random access sequence",null,null],[3,"Raz","pmfp_collections::gauged_raz","Random access zipper",null,null],[3,"RazTree","","Tree form of a RAZ",null,null],[3,"AtHead","","Marker type for interpreting the stack as a sequence.",null,null],[12,"0","","",23,null],[3,"AtTail","","Marker type for interpreting the stack as a sequence.",null,null],[12,"0","","",24,null],[11,"clone","","",25,{"inputs":[{"name":"self"}],"output":{"name":"raz"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"raztree"}}],[11,"eq","","",26,{"inputs":[{"name":"self"},{"name":"raztree"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"self"},{"name":"raztree"}],"output":{"name":"bool"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","the number if items in the sequence",26,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold_up","","Runs an binary function over the sequence data",26,{"inputs":[{"name":"self"},{"name":"i"},{"name":"b"}],"output":{"name":"option"}}],[11,"focus","","focus on a location in the sequence to begin editing.",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"new","","Create a new RAZ, for an empty sequence",25,{"inputs":[],"output":{"name":"raz"}}],[11,"len","","get the total length of the sequence",25,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"unfocus","","unfocus the RAZ before refocusing on a new location in the sequence.",25,{"inputs":[{"name":"self"}],"output":{"name":"raztree"}}],[11,"push_left","","add an element to the left of the cursor",25,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"push_right","","add an element to the right of the cursor",25,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"peek_left","","peek at the element to the left of the cursor",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_right","","peek at the element to the left of the cursor",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"archive_left","","mark the data at the left to be shared",25,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"archive_right","","mark the data at the right to be shared",25,{"inputs":[{"name":"self"},{"name":"l"}],"output":null}],[11,"pop_left","","remove and return an element to the left of the cursor",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_right","","remove and return an element to the right of the cursor",25,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"athead"}}],[11,"clone","","",24,{"inputs":[{"name":"self"}],"output":{"name":"attail"}}],[11,"deref","","",23,null],[11,"deref","","",24,null],[11,"from","","",26,{"inputs":[{"name":"attail"}],"output":{"name":"self"}}],[11,"peek_l","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek_r","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"push_l","","",25,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"push_r","","",25,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"pull_l","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pull_r","","",25,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zip_to","","",26,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"unzip","","",25,{"inputs":[{"name":"self"}],"output":{"name":"raztree"}}],[0,"inc_level_tree","pmfp_collections","Temporary alteration of level_tree for incremental use",null,null],[3,"Tree","pmfp_collections::inc_level_tree","A persistent tree with stable, internally defined structure",null,null],[5,"good_levels","","Use good_levels to verify level consistancy when debugging",null,{"inputs":[{"name":"tree"}],"output":{"name":"bool"}}],[5,"gen_branch_level","","generate a random level appropriate for a balanced binary tree",null,{"inputs":[{"name":"r"}],"output":{"name":"u32"}}],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"tree"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"tree"}],"output":{"name":"bool"}}],[11,"hash","","",27,null],[11,"new","","build a new tree from components, return None if levels are inconsistent",27,{"inputs":[{"name":"u32"},{"name":"e"},{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"level","","peek at the level of the root of this tree",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"l_tree","","obtain the left subtree if it exists",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"r_tree","","obtain the right subtree if it exists",27,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek","","peek at the data contained at the top node of the tree",27,{"inputs":[{"name":"self"}],"output":{"name":"e"}}],[11,"fold_up","","",27,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"r"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[0,"inc_tree_cursor","pmfp_collections","Temporary alteration of tree_cursor for incremental use",null,null],[3,"Cursor","pmfp_collections::inc_tree_cursor","tree cursor, centered on a node of the underlying persistent tree",null,null],[4,"Force","","cursor movement qualifier",null,null],[13,"No","","",28,null],[13,"Yes","","",28,null],[13,"Discard","","",28,null],[8,"TreeUpdate","","Used for updating data when the tree is mutated",null,null],[10,"update","","This method provides references to the (potentially) newly defined left and right branches of a tree node, along with the old data in that node. For example, read size from left and right to get the new size of the branch, or copy the old data without modification for the new branch.",29,{"inputs":[{"name":"option"},{"name":"self"},{"name":"option"}],"output":{"name":"self"}}],[8,"DeriveTreeUpdate","","marker that allows a default implementation of TreeUpdate if the data is also `Clone`",null,null],[11,"clone","","",30,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"clone","","",28,{"inputs":[{"name":"self"}],"output":{"name":"force"}}],[11,"eq","","",28,{"inputs":[{"name":"self"},{"name":"force"}],"output":{"name":"bool"}}],[11,"from","","",30,{"inputs":[{"name":"tree"}],"output":{"name":"self"}}],[11,"new","","creates a new cursor, to an empty underlying tree",30,{"inputs":[],"output":{"name":"self"}}],[11,"with_depth","","creates a new cursor, with expected depth of underlying tree",30,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"split","","Returns the node the cursor is focused on as a tree, plus two cursors containing every node to the left and right, focused on at the two branches of the returned tree",30,null],[11,"join","","makes a new cursor at the given data, between the trees of the other cursors",30,{"inputs":[{"name":"self"},{"name":"u32"},{"name":"e"},{"name":"self"}],"output":{"name":"self"}}],[11,"at_tree","","copies the focused node as a tree",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"left_tree","","copies the left branch of the focused node",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"right_tree","","copies the right branch of the focused node",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek","","peek at the data of the focused tree node",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_level","","peek at the level of the focused tree node",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"down_left_force","","move the cursor into the left branch, returning true if successful use the `Force` enum to determine the type of movement",30,{"inputs":[{"name":"self"},{"name":"force"}],"output":{"name":"bool"}}],[11,"down_left","","move the cursor to the left branch, without entering an empty branch",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"down_right_force","","move the cursor into the right branch, returning true if successful use the `Force` enum to determine the type of movement",30,{"inputs":[{"name":"self"},{"name":"force"}],"output":{"name":"bool"}}],[11,"down_right","","move the cursor to the right branch, without entering an empty branch",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"up","","move the cursor up towards the root of the underlying persistent tree",30,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[0,"inc_gauged_raz","pmfp_collections","Temporary alteration of guaged_raz for incremental use",null,null],[3,"Raz","pmfp_collections::inc_gauged_raz","Random access zipper",null,null],[3,"RazTree","","Tree form of a RAZ",null,null],[3,"AtHead","","Marker type for interpreting the stack as a sequence.",null,null],[12,"0","","",31,null],[3,"AtTail","","Marker type for interpreting the stack as a sequence.",null,null],[12,"0","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"raz"}}],[11,"clone","","",34,{"inputs":[{"name":"self"}],"output":{"name":"raztree"}}],[11,"eq","","",34,{"inputs":[{"name":"self"},{"name":"raztree"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"self"},{"name":"raztree"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"len","","the number if items in the sequence",34,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"fold_up","","Runs an binary function over the sequence data",34,{"inputs":[{"name":"self"},{"name":"i"},{"name":"b"}],"output":{"name":"option"}}],[11,"focus","","focus on a location in the sequence to begin editing.",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"new","","Create a new RAZ, for an empty sequence",33,{"inputs":[],"output":{"name":"raz"}}],[11,"len","","get the total length of the sequence",33,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"unfocus","","unfocus the RAZ before refocusing on a new location in the sequence.",33,{"inputs":[{"name":"self"}],"output":{"name":"raztree"}}],[11,"push_left","","add an element to the left of the cursor",33,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"push_right","","add an element to the right of the cursor",33,{"inputs":[{"name":"self"},{"name":"e"}],"output":null}],[11,"peek_left","","peek at the element to the left of the cursor",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"peek_right","","peek at the element to the left of the cursor",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"archive_left","","mark the data at the left to be shared",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"archive_right","","mark the data at the right to be shared",33,{"inputs":[{"name":"self"},{"name":"u32"}],"output":null}],[11,"pop_left","","remove and return an element to the left of the cursor",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"pop_right","","remove and return an element to the right of the cursor",33,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"athead"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"attail"}}],[11,"deref","","",31,null],[11,"deref","","",32,null],[11,"from","","",34,{"inputs":[{"name":"attail"}],"output":{"name":"self"}}],[11,"peek_l","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"peek_r","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"push_l","","",33,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"push_r","","",33,{"inputs":[{"name":"self"},{"name":"e"}],"output":{"name":"self"}}],[11,"pull_l","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"pull_r","","",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"zip_to","","",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"result"}}],[11,"unzip","","",33,{"inputs":[{"name":"self"}],"output":{"name":"raztree"}}]],"paths":[[4,"Dir"],[4,"Cmd"],[8,"Zip"],[3,"Stacks"],[3,"Stack"],[3,"Iter"],[3,"AtLeft"],[3,"AtRight"],[8,"Seq"],[8,"SeqZip"],[3,"RazSeq"],[3,"Raz"],[3,"Iter"],[3,"NegBin"],[8,"BinTree"],[8,"Level"],[8,"LevelTree"],[8,"NominalTree"],[3,"Tree"],[4,"Force"],[8,"TreeUpdate"],[3,"Cursor"],[3,"AStack"],[3,"AtHead"],[3,"AtTail"],[3,"Raz"],[3,"RazTree"],[3,"Tree"],[4,"Force"],[8,"TreeUpdate"],[3,"Cursor"],[3,"AtHead"],[3,"AtTail"],[3,"Raz"],[3,"RazTree"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number generator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the open interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the closed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current platform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number generator, seeded by the system. Intended to be used in method chaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the `Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample uniformly between two values. This should not be used directly, and is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range` requires. This should not ever be called directly, only via `Range::new`, which will check that `low < high`, so this function doesn't have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as a source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from `[low, high)`. Panics if `low >= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of freedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of freedom.",null,null],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)` distribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom `k`. Panics if `k < 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given parameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",7,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",8,{"inputs":[{"name":"self"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of freedom. Panics if `n <= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers (a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,{"inputs":[{"name":"self"}],"output":{"name":"standardnormal"}}],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,{"inputs":[{"name":"self"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and standard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",10,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",11,{"inputs":[{"name":"self"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean and standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,{"inputs":[{"name":"self"}],"output":{"name":"exp1"}}],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,{"inputs":[{"name":"self"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter `lambda`. Panics if `lambda <= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",13,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the source of randomness.",14,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",16,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",17,{"inputs":[{"name":"self"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit variant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default fixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,{"inputs":[{"name":"self"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",18,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the default fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,{"inputs":[{"name":"self"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can be any length, although the maximum number of elements used is 256 and any more will be silently ignored. A generator constructed with a given seed will generate the same sequence of values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,{"inputs":[{"name":"self"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default fixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to a user-provided value. This permits jumping arbitrarily ahead (or backwards) in the pseudorandom stream.",20,{"inputs":[{"name":"self"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",20,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed, obtained from a variable-length u32 array. Only up to 8 words are used; if less than 8 words are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it generates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it has generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by replacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been generated exceed the threshold.",21,{"inputs":[{"name":"self"}],"output":null}],[11,"next_u32","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",21,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and seed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,{"inputs":[{"name":"self"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",23,{"inputs":[{"name":"self"},{"name":"r"}],"output":null}],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number generators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from the operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",24,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will work best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of randomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",27,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open interval `[0, 1)`.",27,{"inputs":[{"name":"self"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly generated items.",27,{"inputs":[{"name":"self"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,{"inputs":[{"name":"self"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,{"inputs":[{"name":"self"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,{"inputs":[{"name":"self"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",27,null],[11,"choose_mut","","Return a mutable pointer to a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce the same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,{"inputs":[{"name":"self"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",30,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",31,{"inputs":[{"name":"self"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",32,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,{"inputs":[{"name":"self"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u32"}}],[11,"next_u64","","",33,{"inputs":[{"name":"self"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics. Currently includes Hamming, Levenshtein, Jaro, and Jaro-Winkler.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters differ. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value is between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector. Returns a vector of corresponding values between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string in a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions required to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"damerau_levenshtein","","Same as Levenshtein but allows for adjacent transpositions.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string in a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[6,"HammingResult","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"strsimerror"}],"output":{"name":"bool"}}]],"paths":[[4,"StrSimError"]]};
searchIndex["term_size"] = {"doc":"System calls for getting the terminal size.","items":[[5,"dimensions","term_size","Query the current processes's output, returning its width and height as a number of characters. Returns `None` if the output isn't to a terminal.",null,{"inputs":[],"output":{"name":"option"}}]],"paths":[]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision. This also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library implementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where nanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month, day, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time value, including any adjustment for Daylight Saving Time. This is the number of seconds east of UTC. For example, for U.S. Pacific Daylight Time, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10<sup>9</sup> - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and nanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter in nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter in seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"eq","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"lt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"le","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"gt","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"ge","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"bool"}}],[11,"cmp","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"ordering"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"weeks","","Makes a new `Duration` with given number of weeks. Equivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days. Equivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours. Equivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes. Equivalent to `Duration::seconds(minutes * 60)` with overflow checks. Panics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds. Panics when the duration is more than `i64::MAX` milliseconds or less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the closure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_days","","Returns the total number of whole days in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,{"inputs":[{"name":"self"}],"output":{"name":"i64"}}],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration, or `None` on overflow (exceeding 2^63 microseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration, or `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"option"}}],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"neg","","",4,{"inputs":[{"name":"self"}],"output":{"name":"duration"}}],[11,"add","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"sub","","",4,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"duration"}}],[11,"mul","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"div","","",4,{"inputs":[{"name":"self"},{"name":"i32"}],"output":{"name":"duration"}}],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"self"}],"output":{"name":"outofrangeerror"}}],[11,"eq","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"self"},{"name":"outofrangeerror"}],"output":{"name":"bool"}}],[11,"fmt","","",5,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",5,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"eq","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"bool"}}],[11,"cmp","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"timespec"}}],[11,"sub","","",0,{"inputs":[{"name":"self"},{"name":"timespec"}],"output":{"name":"duration"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"precisetime"}}],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of `self` to the value of `later`.",6,{"inputs":[{"name":"self"},{"name":"precisetime"}],"output":{"name":"duration"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"steadytime"}}],[11,"partial_cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"option"}}],[11,"lt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"le","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"gt","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ge","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"cmp","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"ordering"}}],[11,"eq","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"bool"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"steadytime"}],"output":{"name":"duration"}}],[11,"sub","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"add","","",7,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"steadytime"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","The resulting Tm is in UTC.",1,{"inputs":[{"name":"self"},{"name":"duration"}],"output":{"name":"tm"}}],[11,"sub","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"duration"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"tm"}],"output":{"name":"ordering"}}],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,{"inputs":[{"name":"self"}],"output":{"name":"timespec"}}],[11,"to_local","","Convert time to the local timezone",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"to_utc","","Convert time to the UTC",1,{"inputs":[{"name":"self"}],"output":{"name":"tm"}}],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C, in the local timezone.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO C.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"strftime","","Formats the time according to the format string.",1,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"result"}}],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is compatible with ISO 8601.",1,{"inputs":[{"name":"self"}],"output":{"name":"tmfmt"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"self"},{"name":"parseerror"}],"output":{"name":"bool"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"self"}],"output":{"name":"parseerror"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",2,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["unicode_segmentation"] = {"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according to the Unicode Standard Annex #29 rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string's grapheme clusters.",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"UWordBounds","","External iterator for a string's word boundaries.",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on word boundaries, contain any characters with the Alphabetic property, or with General_Category=Number.",null,null],[11,"clone","","",0,{"inputs":[{"name":"self"}],"output":{"name":"graphemeindices"}}],[11,"next","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",0,null],[11,"next_back","","",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"graphemes"}}],[11,"size_hint","","",1,null],[11,"next","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",1,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",2,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",3,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",3,null],[11,"next","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next_back","","",3,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[17,"UNICODE_VERSION","","The version of Unicode that this version of unicode-segmentation is based on.",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to Unicode Standard Annex #29.",null,null],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemes"}}],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their byte offsets. See `graphemes()` for more information.",5,{"inputs":[{"name":"self"},{"name":"bool"}],"output":{"name":"graphemeindices"}}],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on UAX#29 word boundaries.",5,{"inputs":[{"name":"self"}],"output":{"name":"unicodewords"}}],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on UAX#29 word boundaries.",5,{"inputs":[{"name":"self"}],"output":{"name":"uwordbounds"}}],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries, and their offsets. See `split_word_bounds()` for more information.",5,{"inputs":[{"name":"self"}],"output":{"name":"uwordboundindices"}}]],"paths":[[3,"GraphemeIndices"],[3,"Graphemes"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to Unicode Standard Annex #11 rules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of Unicode that this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[10,"width_cjk","","Returns the character's displayed width in columns, or `None` if the character is a control character other than `'\\x00'`.",0,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[10,"width_cjk","","Returns the string's displayed width in columns.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements are O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the values being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"vecmap"}}],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity` elements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without reallocating.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys. In the case of `VecMap` this means reallocations will not occur as long as all inserted keys are less than `len`.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys. The iterator's element type is `usize`.",1,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys. The iterator's element type is `&'r V`.",1,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys, with mutable references to the values. The iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":null}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"self"}}],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of the keys, emptying (but not consuming) the original `VecMap`. The iterator's element type is `(usize, &'r V)`. Keeps the allocated memory for reuse.",1,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"self"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value present in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key was previously in the map.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty, and returns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key, and returns a mutable reference to it.",2,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key, and returns the entry's old value.",3,{"inputs":[{"name":"self"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"self"}],"output":{"name":"v"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys, consuming the original `VecMap`. The iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"self"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"next","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"next","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}],[11,"size_hint","","",9,null],[11,"next_back","","",9,{"inputs":[{"name":"self"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
initSearch(searchIndex);
