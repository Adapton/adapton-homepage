initSidebarItems({"enum":[["ArtIdChoice","An `ArtIdChoice` choses between `Eager`, `Structural` and `Nominal` identities for articulation points introduced by `thunk`."],["Engine","The engine API works in two modes: `Naive` and `DCG`. A `Naive` engine is stateless, whereas the `DCG` is stateful."]],"fn":[["cell","Creates a mutable articulation."],["cnt","Counts various engine cost metrics, returning a product of sums (`Cnt`)"],["engine_is_dcg","True iff the current engine is a `DCG`"],["engine_is_naive","True iff the current engine is `Naive`"],["force","Demand & observe arts (all kinds): force"],["init_dcg","Initializes global state with a fresh DCG-based engine; returns the old engine. The DCG is the central implementation structure behind Adapton. At a high level, it consists of a data dependence graph (the \"demanded computation graph\"), and an associated memoization table."],["init_engine","alias for `use_engine`"],["init_naive","Initializes global state with a (\"fresh\") Naive engine; returns the old engine. The naive engine is stateless, and performs no memoization and builds no dependence graphs. (Since the naive engine is stateless, every instance of the naive engine is equivalent to a \"fresh\" one)."],["name_fork","Create two names from one"],["name_fork3","Create three names from one"],["name_fork4","Create four names from one"],["name_of_hash64",""],["name_of_isize","Create a name from a `isize`"],["name_of_str","Create a name from a `str`"],["name_of_string","Create a name from a `string`"],["name_of_usize","Create a name from a `usize`"],["name_pair","Create one name from two (binary name composition)"],["name_unit","Create a name from unit, that is, create a \"leaf\" name."],["ns","Creates or re-enters a given namespace; performs the given computation there."],["put","Creates immutable, eager articulation."],["set","Mutates a mutable articulation."],["structural","Enters a special \"namespace\" where all name uses are ignored; instead, Adapton uses structural identity."],["thunk","Creates an articulated computation."],["use_engine","Initializes global state with a fresh DCG-based engine; returns the old engine"]],"mod":[["reflect","Reflects the DCG engine, including both the effects of the programs running in it, and the internal effects of the engine cleaning and dirtying the DCG.  For the latter effects, see the `trace` module."]],"struct":[["Art","*Articulations:* for incrementally-changing data/computation."],["Cnt","*Engine Counts*: Metrics that reflect the time and space costs of the engine."],["DCG","*(DCG) Demanded Computation Graph*: The cache of past computation."],["Flags","Flags control runtime behavior of the DCG."],["Name","*Names*: First-class data that identifies a mutable cell (see `cell`) or a thunk (see `thunk`).  When a name identifies different content over time, it describes *where* incremental changing is occurring, relative to other (unaffected) parts of data structures or computations."]]});