initSidebarItems({"enum":[["ArtIdChoice","An `ArtIdChoice` is a symbolic identity for an articulation point made by Adapton::thunk.  An `ArtIdChoice` is chosen by the programmer to identify the point during evaluation (and simultaneously, to identify the point during re-evaluation). An `Eager` identity is special, and it means \"do not introduce any laziness/memoization overhead here\"; when Eager is used, no thunk is created; rather, the computation eagerly produces an articulated value of the form Art::Rc(v), for some value v."],["Engine","The engine API works in two modes: `Naive` and `DCG`."]],"fn":[["cell","Creates a mutable articulation."],["cnt","Counts various engine cost metrics, returning a product of sums (`Cnt`)"],["engine_is_dcg","True iff the current engine is a `DCG`"],["engine_is_naive","True iff the current engine is `Naive`"],["force","Demand & observe arts (all kinds): force"],["init_dcg","Initializes global state with a fresh DCG-based engine; returns the old engine. The DCG is the central implementation structure behind Adapton. At a high level, it consists of a data dependence graph (the \"demanded computation graph\"), and an associated memoization table."],["init_engine","alias for `use_engine`"],["init_naive","Initializes global state with a (\"fresh\") Naive engine; returns the old engine. The naive engine is stateless, and performs no memoization and builds no dependence graphs. (Since the naive engine is stateless, every instance of the naive engine is equivalent to a \"fresh\" one)."],["name_fork","Create two names from one"],["name_fork3","Create three names from one"],["name_fork4","Create four names from one"],["name_of_isize","Create a name from a `isize`"],["name_of_str","Create a name from a `str`"],["name_of_string","Create a name from a `string`"],["name_of_usize","Create a name from a `usize`"],["name_pair","Create one name from two (binary name composition)"],["name_unit","Create a name from unit, that is, create a \"leaf\" name."],["ns","Creates or re-enters a given namespace; performs the given computation there."],["put","Creates immutable, eager articulation."],["set","Mutates a mutable articulation."],["structural","Enters a special \"namespace\" where all name uses are ignored; instead, Adapton uses structural identity."],["thunk","Creates an articulated computation."],["use_engine","Initializes global state with a fresh DCG-based engine; returns the old engine"]],"struct":[["Art","The term \"Art\" stands for two things here: \"Adapton return type\", and \"Articulation point, for 'articulating' incremental change\". The concept of an \"Art\" also abstracts over whether the producer is eager (like a ref cell) or lazy (like a thunk)."],["Cnt",""],["DCG","The DCG consists of private state (a memo table of DCG nodes, a stack of DCG nodes, etc.)."],["Flags","Flags control runtime behavior"],["Globals",""],["Loc","Each location identifies a node in the DCG."],["Name","Names: A fundemental abstraction in Adapton.  When they identify different content over time, they give rise to incremental changes. Names are used to identify mutable cells (see `cell`) and thunks (see `thunk)."]]});